/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package generated;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static generated.GeneratedTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_QueryGrammarLexer.flex</tt>
 */
public class _QueryGrammarLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 2184 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\6\2\1\3\44\2\1\4\22\2\1\5\37\2\1\4\237\2");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\4\2\22\0\1\4\1\0\1\11\4\0\1\7\1\16\1\17\1\13\1\0\1\15\1\0\1\14\1"+
    "\12\12\5\7\0\32\6\1\0\1\10\4\0\1\37\1\47\1\23\1\34\1\21\1\25\1\45\1\41\1\35"+
    "\1\74\1\6\1\22\1\30\1\36\1\27\1\33\1\6\1\26\1\20\1\24\1\46\1\62\1\40\1\6\1"+
    "\50\1\6\12\0\1\1\32\0\1\3\357\0\40\6\1\57\1\70\1\56\1\42\1\43\1\44\1\77\1"+
    "\32\1\31\2\6\1\76\1\63\1\73\1\55\1\54\1\52\1\51\1\60\1\53\3\6\1\67\1\75\1"+
    "\65\1\72\1\71\1\61\1\6\1\64\1\66\60\0\1\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0"+
    "\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\3\1\1\5\1\6"+
    "\1\7\1\10\1\11\27\4\1\0\1\12\3\0\1\13"+
    "\11\4\1\14\1\4\1\15\5\4\1\16\6\4\1\17"+
    "\5\4\1\20\7\4\1\12\3\4\1\21\13\4\1\22"+
    "\1\23\2\4\1\24\11\4\1\25\7\4\1\26\1\27"+
    "\1\30\1\4\1\31\5\4\1\32\11\4\1\33\3\4"+
    "\1\34\2\4\1\35\1\4\1\36\1\4\1\37\1\40"+
    "\1\41\1\42\3\4\1\43\1\44\1\4\1\45\1\46"+
    "\10\4\1\47\1\50\1\51\2\4\1\52\3\4\1\53"+
    "\1\54\3\4\1\55\5\4\1\56\1\4\1\57\13\4"+
    "\1\60\1\4\1\61\1\62\1\4\1\63\1\4\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\100\0\100\0\100\0\100\0\100\0\u0200\0\u0240"+
    "\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440"+
    "\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640"+
    "\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u0140\0\100\0\u07c0"+
    "\0\u0180\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980"+
    "\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0100\0\u0ac0\0\u0100\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0100\0\u0e00\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0"+
    "\0\u1100\0\u0180\0\u1140\0\u1180\0\u11c0\0\u0100\0\u1200\0\u1240"+
    "\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440"+
    "\0\u1480\0\u0100\0\u0100\0\u14c0\0\u1500\0\u0100\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u0100"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u0100"+
    "\0\u0100\0\u0100\0\u1940\0\u0100\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u1a80\0\u0100\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00"+
    "\0\u1c40\0\u1c80\0\u1cc0\0\u0100\0\u1d00\0\u1d40\0\u1d80\0\u0100"+
    "\0\u1dc0\0\u1e00\0\u0100\0\u1e40\0\u0100\0\u1e80\0\u0100\0\u0100"+
    "\0\u0100\0\u0100\0\u1ec0\0\u1f00\0\u1f40\0\u0100\0\u0100\0\u1f80"+
    "\0\u0100\0\u0100\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100"+
    "\0\u2140\0\u2180\0\u0100\0\u0100\0\u0100\0\u21c0\0\u2200\0\u0100"+
    "\0\u2240\0\u2280\0\u22c0\0\u0100\0\u0100\0\u2300\0\u2340\0\u2380"+
    "\0\u0100\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u0100\0\u2500"+
    "\0\u0100\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0"+
    "\0\u2700\0\u2740\0\u2780\0\u27c0\0\u0100\0\u2800\0\u0100\0\u0100"+
    "\0\u2840\0\u0100\0\u2880\0\u0100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\6\1\20\1\6\1\21\1\22\1\23\1\24"+
    "\1\6\1\25\2\6\1\26\1\27\1\6\1\30\1\31"+
    "\1\32\1\33\2\6\1\34\1\35\1\36\1\6\1\37"+
    "\1\6\1\40\1\41\1\42\1\43\15\6\1\44\1\6"+
    "\1\45\1\6\102\0\1\4\1\0\1\4\100\0\1\5"+
    "\77\0\2\6\11\0\60\6\7\46\1\47\1\50\67\46"+
    "\10\51\1\52\1\47\66\51\12\0\1\53\72\0\2\6"+
    "\11\0\1\6\1\54\56\6\5\0\2\6\11\0\1\6"+
    "\1\55\56\6\5\0\2\6\11\0\6\6\1\56\1\57"+
    "\50\6\5\0\2\6\11\0\6\6\1\60\10\6\1\61"+
    "\6\6\1\62\31\6\5\0\2\6\11\0\15\6\1\63"+
    "\42\6\5\0\2\6\11\0\6\6\1\64\7\6\1\65"+
    "\7\6\1\66\31\6\5\0\2\6\11\0\12\6\1\67"+
    "\16\6\1\70\11\6\1\71\14\6\5\0\2\6\11\0"+
    "\1\6\1\72\13\6\1\73\42\6\5\0\2\6\11\0"+
    "\16\6\1\74\41\6\5\0\2\6\11\0\1\75\1\6"+
    "\1\76\55\6\5\0\2\6\11\0\21\6\1\77\36\6"+
    "\5\0\2\6\11\0\17\6\1\100\40\6\5\0\2\6"+
    "\11\0\23\6\1\101\34\6\5\0\2\6\11\0\6\6"+
    "\1\102\51\6\5\0\2\6\11\0\16\6\1\103\41\6"+
    "\5\0\2\6\11\0\30\6\1\104\27\6\5\0\2\6"+
    "\11\0\22\6\1\105\12\6\1\106\22\6\5\0\2\6"+
    "\11\0\34\6\1\107\13\6\1\110\7\6\5\0\2\6"+
    "\11\0\32\6\1\111\2\6\1\112\22\6\5\0\2\6"+
    "\11\0\50\6\1\113\7\6\5\0\2\6\11\0\31\6"+
    "\1\114\3\6\1\115\15\6\1\116\4\6\5\0\2\6"+
    "\11\0\7\6\1\117\50\6\5\0\2\6\11\0\24\6"+
    "\1\120\10\6\1\121\22\6\1\46\2\0\75\46\10\51"+
    "\1\52\1\122\66\51\1\53\2\0\75\53\5\0\2\6"+
    "\11\0\2\6\1\123\55\6\5\0\2\6\11\0\5\6"+
    "\1\124\52\6\5\0\2\6\11\0\26\6\1\125\31\6"+
    "\5\0\2\6\11\0\13\6\1\126\44\6\5\0\2\6"+
    "\11\0\7\6\1\127\50\6\5\0\2\6\11\0\2\6"+
    "\1\130\55\6\5\0\2\6\11\0\2\6\1\131\55\6"+
    "\5\0\2\6\11\0\25\6\1\132\32\6\5\0\2\6"+
    "\11\0\14\6\1\133\43\6\5\0\2\6\11\0\4\6"+
    "\1\134\53\6\5\0\2\6\11\0\40\6\1\135\17\6"+
    "\5\0\2\6\11\0\24\6\1\136\33\6\5\0\2\6"+
    "\11\0\1\137\57\6\5\0\2\6\11\0\1\140\57\6"+
    "\5\0\2\6\11\0\16\6\1\141\41\6\5\0\2\6"+
    "\11\0\3\6\1\142\54\6\5\0\2\6\11\0\2\6"+
    "\1\143\55\6\5\0\2\6\11\0\1\6\1\144\56\6"+
    "\5\0\2\6\11\0\42\6\1\145\15\6\5\0\2\6"+
    "\11\0\24\6\1\146\33\6\5\0\2\6\11\0\7\6"+
    "\1\147\50\6\5\0\2\6\11\0\15\6\1\150\42\6"+
    "\5\0\2\6\11\0\32\6\1\151\25\6\5\0\2\6"+
    "\11\0\24\6\1\152\33\6\5\0\2\6\11\0\35\6"+
    "\1\153\22\6\5\0\2\6\11\0\51\6\1\154\6\6"+
    "\5\0\2\6\11\0\37\6\1\155\20\6\5\0\2\6"+
    "\11\0\56\6\1\156\1\6\5\0\2\6\11\0\52\6"+
    "\1\157\5\6\5\0\2\6\11\0\24\6\1\160\33\6"+
    "\5\0\2\6\11\0\12\6\1\161\45\6\5\0\2\6"+
    "\11\0\24\6\1\162\6\6\1\163\24\6\5\0\2\6"+
    "\11\0\15\6\1\164\42\6\5\0\2\6\11\0\36\6"+
    "\1\165\21\6\5\0\2\6\11\0\57\6\1\166\5\0"+
    "\2\6\11\0\1\6\1\167\56\6\5\0\2\6\11\0"+
    "\4\6\1\170\53\6\5\0\2\6\11\0\1\6\1\171"+
    "\56\6\5\0\2\6\11\0\10\6\1\172\47\6\5\0"+
    "\2\6\11\0\1\173\57\6\5\0\2\6\11\0\2\6"+
    "\1\174\55\6\5\0\2\6\11\0\21\6\1\175\36\6"+
    "\5\0\2\6\11\0\1\6\1\176\56\6\5\0\2\6"+
    "\11\0\1\6\1\177\56\6\5\0\2\6\11\0\11\6"+
    "\1\200\46\6\5\0\2\6\11\0\44\6\1\201\13\6"+
    "\5\0\2\6\11\0\3\6\1\202\54\6\5\0\2\6"+
    "\11\0\4\6\1\203\53\6\5\0\2\6\11\0\1\6"+
    "\1\204\56\6\5\0\2\6\11\0\6\6\1\205\51\6"+
    "\5\0\2\6\11\0\15\6\1\206\42\6\5\0\2\6"+
    "\11\0\26\6\1\207\31\6\5\0\2\6\11\0\7\6"+
    "\1\210\50\6\5\0\2\6\11\0\33\6\1\211\24\6"+
    "\5\0\2\6\11\0\23\6\1\212\34\6\5\0\2\6"+
    "\11\0\32\6\1\213\25\6\5\0\2\6\11\0\36\6"+
    "\1\214\21\6\5\0\2\6\11\0\36\6\1\215\21\6"+
    "\5\0\2\6\11\0\53\6\1\216\4\6\5\0\2\6"+
    "\11\0\24\6\1\217\33\6\5\0\2\6\11\0\32\6"+
    "\1\220\25\6\5\0\2\6\11\0\55\6\1\221\2\6"+
    "\5\0\2\6\11\0\40\6\1\222\17\6\5\0\2\6"+
    "\11\0\16\6\1\223\41\6\5\0\2\6\11\0\35\6"+
    "\1\224\22\6\5\0\2\6\11\0\41\6\1\225\16\6"+
    "\5\0\2\6\11\0\3\6\1\226\54\6\5\0\2\6"+
    "\11\0\1\6\1\227\56\6\5\0\2\6\11\0\4\6"+
    "\1\230\53\6\5\0\2\6\11\0\6\6\1\231\51\6"+
    "\5\0\2\6\11\0\6\6\1\232\51\6\5\0\2\6"+
    "\11\0\53\6\1\233\4\6\5\0\2\6\11\0\45\6"+
    "\1\234\12\6\5\0\2\6\11\0\15\6\1\235\42\6"+
    "\5\0\2\6\11\0\6\6\1\236\51\6\5\0\2\6"+
    "\11\0\1\6\1\237\56\6\5\0\2\6\11\0\16\6"+
    "\1\240\41\6\5\0\2\6\11\0\13\6\1\241\44\6"+
    "\5\0\2\6\11\0\16\6\1\242\41\6\5\0\2\6"+
    "\11\0\34\6\1\243\23\6\5\0\2\6\11\0\11\6"+
    "\1\244\46\6\5\0\2\6\11\0\46\6\1\245\11\6"+
    "\5\0\2\6\11\0\35\6\1\246\22\6\5\0\2\6"+
    "\11\0\35\6\1\247\22\6\5\0\2\6\11\0\23\6"+
    "\1\250\34\6\5\0\2\6\11\0\53\6\1\251\4\6"+
    "\5\0\2\6\11\0\32\6\1\252\25\6\5\0\2\6"+
    "\11\0\24\6\1\253\33\6\5\0\2\6\11\0\4\6"+
    "\1\254\53\6\5\0\2\6\11\0\37\6\1\255\20\6"+
    "\5\0\2\6\11\0\11\6\1\256\46\6\5\0\2\6"+
    "\11\0\16\6\1\257\41\6\5\0\2\6\11\0\25\6"+
    "\1\260\32\6\5\0\2\6\11\0\34\6\1\261\23\6"+
    "\5\0\2\6\11\0\53\6\1\262\4\6\5\0\2\6"+
    "\11\0\23\6\1\263\34\6\5\0\2\6\11\0\24\6"+
    "\1\264\33\6\5\0\2\6\11\0\24\6\1\265\33\6"+
    "\5\0\2\6\11\0\11\6\1\266\46\6\5\0\2\6"+
    "\11\0\24\6\1\267\33\6\5\0\2\6\11\0\24\6"+
    "\1\270\33\6\5\0\2\6\11\0\24\6\1\271\33\6"+
    "\5\0\2\6\11\0\3\6\1\272\54\6\5\0\2\6"+
    "\11\0\11\6\1\273\46\6\5\0\2\6\11\0\24\6"+
    "\1\274\33\6\5\0\2\6\11\0\35\6\1\275\22\6"+
    "\5\0\2\6\11\0\53\6\1\276\4\6\5\0\2\6"+
    "\11\0\24\6\1\277\33\6\5\0\2\6\11\0\53\6"+
    "\1\300\4\6\5\0\2\6\11\0\4\6\1\301\53\6"+
    "\5\0\2\6\11\0\32\6\1\302\25\6\5\0\2\6"+
    "\11\0\53\6\1\303\4\6\5\0\2\6\11\0\47\6"+
    "\1\304\10\6\5\0\2\6\11\0\11\6\1\305\46\6"+
    "\5\0\2\6\11\0\53\6\1\306\4\6\5\0\2\6"+
    "\11\0\35\6\1\307\22\6\5\0\2\6\11\0\11\6"+
    "\1\310\46\6\5\0\2\6\11\0\11\6\1\311\46\6"+
    "\5\0\2\6\11\0\40\6\1\312\17\6\5\0\2\6"+
    "\11\0\24\6\1\313\33\6\5\0\2\6\11\0\36\6"+
    "\1\314\21\6\5\0\2\6\11\0\24\6\1\315\33\6"+
    "\5\0\2\6\11\0\40\6\1\316\17\6\5\0\2\6"+
    "\11\0\41\6\1\317\16\6\5\0\2\6\11\0\24\6"+
    "\1\320\33\6\5\0\2\6\11\0\37\6\1\321\20\6"+
    "\5\0\2\6\11\0\41\6\1\322\16\6\5\0\2\6"+
    "\11\0\40\6\1\323\17\6\5\0\2\6\11\0\41\6"+
    "\1\324\16\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10432];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\5\11\27\1\1\0\1\11\3\0"+
    "\252\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _QueryGrammarLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QueryGrammarLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 53: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 54: break;
          case 3: 
            { return NUMBER;
            }
          case 55: break;
          case 4: 
            { return IDSIMPLE;
            }
          case 56: break;
          case 5: 
            { return WILDCARD;
            }
          case 57: break;
          case 6: 
            { return DOT;
            }
          case 58: break;
          case 7: 
            { return COMMA;
            }
          case 59: break;
          case 8: 
            { return LPAREN;
            }
          case 60: break;
          case 9: 
            { return RPAREN;
            }
          case 61: break;
          case 10: 
            { return STRING;
            }
          case 62: break;
          case 11: 
            { return LINE_COMMENT;
            }
          case 63: break;
          case 12: 
            { return ON;
            }
          case 64: break;
          case 13: 
            { return ИЗ;
            }
          case 65: break;
          case 14: 
            { return AS;
            }
          case 66: break;
          case 15: 
            { return BY;
            }
          case 67: break;
          case 16: 
            { return ПО;
            }
          case 68: break;
          case 17: 
            { return TOP;
            }
          case 69: break;
          case 18: 
            { return ASC;
            }
          case 70: break;
          case 19: 
            { return ALL;
            }
          case 71: break;
          case 20: 
            { return ГДЕ;
            }
          case 72: break;
          case 21: 
            { return ВСЕ;
            }
          case 73: break;
          case 22: 
            { return LEFT;
            }
          case 74: break;
          case 23: 
            { return TRUE;
            }
          case 75: break;
          case 24: 
            { return FROM;
            }
          case 76: break;
          case 25: 
            { return FULL;
            }
          case 77: break;
          case 26: 
            { return DESC;
            }
          case 78: break;
          case 27: 
            { return УБЫВ;
            }
          case 79: break;
          case 28: 
            { return ВОЗР;
            }
          case 80: break;
          case 29: 
            { return JOIN;
            }
          case 81: break;
          case 30: 
            { return ЛОЖЬ;
            }
          case 82: break;
          case 31: 
            { return FALSE;
            }
          case 83: break;
          case 32: 
            { return RIGHT;
            }
          case 84: break;
          case 33: 
            { return ORDER;
            }
          case 85: break;
          case 34: 
            { return OUTER;
            }
          case 86: break;
          case 35: 
            { return INNER;
            }
          case 87: break;
          case 36: 
            { return WHERE;
            }
          case 88: break;
          case 37: 
            { return GROUP;
            }
          case 89: break;
          case 38: 
            { return UNION;
            }
          case 90: break;
          case 39: 
            { return ЛЕВОЕ;
            }
          case 91: break;
          case 40: 
            { return SELECT;
            }
          case 92: break;
          case 41: 
            { return ИСТИНА;
            }
          case 93: break;
          case 42: 
            { return HAVING;
            }
          case 94: break;
          case 43: 
            { return ПРАВОЕ;
            }
          case 95: break;
          case 44: 
            { return ПОЛНОЕ;
            }
          case 96: break;
          case 45: 
            { return ИМЕЮЩИЕ;
            }
          case 97: break;
          case 46: 
            { return ВНЕШНЕЕ;
            }
          case 98: break;
          case 47: 
            { return DISTINCT;
            }
          case 99: break;
          case 48: 
            { return СОЕДИНЕНИЕ;
            }
          case 100: break;
          case 49: 
            { return ОБЪЕДИНИТЬ;
            }
          case 101: break;
          case 50: 
            { return ВНУТРЕННЕЕ;
            }
          case 102: break;
          case 51: 
            { return УПОРЯДОЧИТЬ;
            }
          case 103: break;
          case 52: 
            { return СГРУППИРОВАТЬ;
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
