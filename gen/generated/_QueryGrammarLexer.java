/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package generated;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static generated.GeneratedTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_QueryGrammarLexer.flex</tt>
 */
public class _QueryGrammarLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 7, 6]
   * Total runtime size is 2576 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>13]<<7)|((ch>>6)&0x7f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\206\2");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\12\3\1\6\1\7\110\3\1\10\45\3\1\11\1\12\2\3\1\13\73"+
    "\3\1\10\277\3");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\66\4\101\22\0\1\66\1\3\1\76\5\0\1\104\1\105\1\102\1\107\1\103\1\110"+
    "\1\75\1\100\12\67\1\0\1\106\1\1\1\4\1\2\2\0\1\27\1\111\1\41\1\30\1\10\1\54"+
    "\1\46\1\52\1\72\1\63\1\73\1\5\1\35\1\23\1\25\1\56\1\71\1\32\1\74\1\26\1\34"+
    "\1\45\1\51\1\44\1\112\1\71\1\0\1\77\4\0\1\27\1\111\1\41\1\30\1\10\1\54\1\46"+
    "\1\52\1\72\1\63\1\73\1\5\1\35\1\23\1\25\1\56\1\71\1\32\1\74\1\26\1\34\1\45"+
    "\1\51\1\44\1\112\1\71\12\0\1\101\32\0\1\66\217\0\2\6\115\0\1\16\20\0\1\40"+
    "\1\14\1\24\1\53\1\13\1\17\1\70\1\55\1\31\1\71\1\42\1\33\1\37\1\15\1\12\1\11"+
    "\1\47\1\20\1\21\1\36\2\71\1\65\1\43\1\64\1\61\1\62\1\50\1\22\1\71\1\60\1\57"+
    "\1\40\1\14\1\24\1\53\1\13\1\17\1\70\1\55\1\31\1\71\1\42\1\33\1\37\1\15\1\12"+
    "\1\11\1\47\1\20\1\21\1\36\2\71\1\65\1\43\1\64\1\61\1\62\1\50\1\22\1\71\1\60"+
    "\1\57\60\0\1\66\77\0\13\66\35\0\2\101\5\0\1\66\57\0\1\66\112\0\1\7\25\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\5\5\1\1\4\5\1\6\4\5\1\7\17\5\1\10"+
    "\1\11\2\5\1\12\1\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\5\10\0\1\23\1\24"+
    "\1\25\1\0\2\5\1\0\1\26\1\6\2\5\1\27"+
    "\3\5\1\30\2\0\14\5\1\31\1\32\5\5\1\33"+
    "\2\5\1\33\1\0\6\5\1\34\1\0\4\5\1\0"+
    "\23\5\1\6\1\26\2\5\1\0\1\35\1\0\1\36"+
    "\1\37\13\0\2\5\2\0\1\5\1\40\5\5\2\0"+
    "\12\5\1\41\3\5\1\42\2\5\1\43\1\7\1\5"+
    "\1\43\2\0\4\5\1\32\1\5\1\0\3\5\1\0"+
    "\6\5\1\0\4\5\1\33\4\5\1\44\3\5\1\0"+
    "\3\5\1\35\7\0\1\45\1\46\1\45\1\0\2\47"+
    "\5\5\1\0\1\50\5\5\1\51\6\5\1\52\1\53"+
    "\1\0\2\54\4\5\1\0\2\5\1\0\4\5\2\55"+
    "\5\5\1\56\1\5\1\0\1\5\1\0\1\57\2\60"+
    "\2\5\5\0\1\61\5\5\1\0\6\5\1\62\1\63"+
    "\1\0\3\5\2\64\2\65\3\5\1\66\1\5\1\0"+
    "\1\5\1\52\1\61\1\5\3\0\2\5\1\67\6\5"+
    "\1\0\6\5\2\70\1\67\3\0\4\5\1\0\4\5"+
    "\1\0\4\5\2\71\3\5\1\0\6\5\1\0\4\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\341"+
    "\0\u020d\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a"+
    "\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672"+
    "\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca"+
    "\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22"+
    "\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99\0\341\0\u0ce4\0\u0d2f"+
    "\0\341\0\341\0\341\0\341\0\341\0\341\0\341\0\u0d7a"+
    "\0\u0dc5\0\u0e10\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2"+
    "\0\341\0\341\0\341\0\u101d\0\u1068\0\u10b3\0\u10fe\0\341"+
    "\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0\0\u130b\0\u0384"+
    "\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482\0\u14cd\0\u1518\0\u1563"+
    "\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725\0\u0384\0\u1770"+
    "\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u1932\0\u197d\0\u19c8"+
    "\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20"+
    "\0\u0384\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d"+
    "\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a\0\u2085"+
    "\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u22dd"+
    "\0\u2328\0\u2373\0\u23be\0\u0384\0\u2409\0\u2454\0\u0ce4\0\341"+
    "\0\u249f\0\u24ea\0\u0384\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661"+
    "\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u27d8\0\u2823\0\u286e\0\u28b9"+
    "\0\u2904\0\u294f\0\u299a\0\u0384\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6"+
    "\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e"+
    "\0\u2d69\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u0384\0\u2ee0\0\u2f2b"+
    "\0\u2f76\0\u0384\0\u2fc1\0\u300c\0\341\0\u0384\0\u3057\0\u0384"+
    "\0\u30a2\0\u30ed\0\u3138\0\u3183\0\u31ce\0\u3219\0\u0384\0\u3264"+
    "\0\u32af\0\u32fa\0\u3345\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc"+
    "\0\u3507\0\u3552\0\u359d\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714"+
    "\0\u0384\0\u375f\0\u37aa\0\u37f5\0\u3840\0\u0384\0\u388b\0\u38d6"+
    "\0\u3921\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u0ce4\0\341\0\u3a98"+
    "\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f\0\341\0\u0384\0\u0384"+
    "\0\u3c5a\0\341\0\u0384\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1"+
    "\0\u3e1c\0\341\0\u3e67\0\u3eb2\0\u3efd\0\u3f48\0\u3f93\0\u0384"+
    "\0\u3fde\0\u4029\0\u4074\0\u40bf\0\u410a\0\u4155\0\u0384\0\u0384"+
    "\0\u41a0\0\341\0\u0384\0\u41eb\0\u4236\0\u4281\0\u42cc\0\u4317"+
    "\0\u4362\0\u43ad\0\u43f8\0\u4443\0\u448e\0\u44d9\0\u4524\0\341"+
    "\0\u0384\0\u456f\0\u45ba\0\u4605\0\u4650\0\u469b\0\u0384\0\u46e6"+
    "\0\u4731\0\u477c\0\u47c7\0\u0384\0\341\0\u0384\0\u4812\0\u485d"+
    "\0\u48a8\0\u48f3\0\u493e\0\u4989\0\u49d4\0\341\0\u4a1f\0\u4a6a"+
    "\0\u4ab5\0\u4b00\0\u4b4b\0\u4b96\0\u4be1\0\u4c2c\0\u4c77\0\u4cc2"+
    "\0\u4d0d\0\u4d58\0\u0384\0\u0384\0\u4da3\0\u4dee\0\u4e39\0\u4e84"+
    "\0\341\0\u0384\0\341\0\u0384\0\u4ecf\0\u4f1a\0\u4f65\0\u0384"+
    "\0\u4fb0\0\u4ffb\0\u5046\0\341\0\u0384\0\u5091\0\u50dc\0\u5127"+
    "\0\u5172\0\u51bd\0\u5208\0\341\0\u5253\0\u529e\0\u52e9\0\u5334"+
    "\0\u537f\0\u53ca\0\u5415\0\u5460\0\u54ab\0\u54f6\0\u5541\0\u558c"+
    "\0\u55d7\0\341\0\u0384\0\u0384\0\u5622\0\u566d\0\u56b8\0\u5703"+
    "\0\u574e\0\u5799\0\u57e4\0\u582f\0\u587a\0\u58c5\0\u5910\0\u595b"+
    "\0\u59a6\0\u59f1\0\u5a3c\0\u5a87\0\u5ad2\0\341\0\u0384\0\u5b1d"+
    "\0\u5b68\0\u5bb3\0\u5bfe\0\u5c49\0\u5c94\0\u5cdf\0\u5d2a\0\u5d75"+
    "\0\u5dc0\0\u5e0b\0\u5e56\0\u5ea1\0\u5eec\0\u5f37";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\2\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\16\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\16"+
    "\1\41\1\42\3\16\1\43\1\44\1\16\1\45\1\46"+
    "\1\47\1\50\6\16\1\51\2\16\1\52\1\53\2\16"+
    "\1\54\1\16\1\55\1\56\1\57\1\4\1\60\1\52"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\16\16\0\1\71\1\0\1\72\6\0\1\73\5\0"+
    "\1\74\1\0\1\75\1\0\1\76\1\77\31\0\1\71"+
    "\122\0\1\100\123\0\1\101\1\0\1\102\112\0\1\103"+
    "\112\0\1\101\113\0\1\16\1\104\1\0\1\105\5\16"+
    "\1\0\47\16\1\0\3\16\1\106\2\16\1\107\13\0"+
    "\2\16\16\0\1\110\4\0\1\111\50\0\1\110\23\0"+
    "\1\112\2\0\6\16\1\0\4\16\1\113\42\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\2\16"+
    "\1\114\3\16\1\0\1\115\27\16\1\116\16\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\4\16"+
    "\1\117\1\16\1\0\47\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\47\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\1\120\46\16\1\0\6\16\1\107\13\0\2\16"+
    "\10\0\1\121\23\0\1\122\63\0\1\16\2\0\6\16"+
    "\1\0\1\16\1\123\45\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\2\16\1\124\3\16\1\0"+
    "\17\16\1\125\10\16\1\126\3\16\1\127\12\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\2\16"+
    "\1\130\3\16\1\0\47\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\6\16\1\131"+
    "\6\16\1\132\31\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\2\16\1\133\2\16\1\134\1\0"+
    "\1\16\1\135\27\16\1\136\15\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\4\16"+
    "\1\137\6\16\1\140\1\16\1\141\31\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\6\16\1\142\4\16\1\143\17\16\1\144\13\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\145\2\0\6\16"+
    "\1\146\4\16\1\147\21\16\1\150\20\16\1\0\5\16"+
    "\1\151\1\107\13\0\2\16\5\0\1\16\1\152\1\0"+
    "\1\153\5\16\1\0\47\16\1\0\3\16\1\154\2\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\5\16\1\155"+
    "\1\0\1\16\1\156\12\16\1\157\3\16\1\160\15\16"+
    "\1\161\10\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\1\162\1\0\6\16\1\0\47\16\1\0\3\16"+
    "\1\163\2\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\2\16\1\164\3\16\1\0\1\165\46\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\4\16\1\166\42\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\1\167\1\0\6\16\1\0\10\16\1\170"+
    "\36\16\1\0\3\16\1\171\2\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\1\16\1\172\2\16\1\173\1\16"+
    "\1\0\47\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\12\16\1\174\6\16\1\175"+
    "\25\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\6\16\1\176\1\16\1\177\36\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\2\16\1\200\3\16\1\0\21\16\1\201\25\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\13\16\1\202\33\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\21\16\1\203"+
    "\25\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\33\16\1\204\13\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\10\16\1\205\36\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\3\16\1\206\2\16\1\0\47\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\10\16\1\207\2\16\1\210\1\16\1\211"+
    "\31\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\6\16\1\212\40\16\1\0\6\16"+
    "\1\107\13\0\2\16\66\0\1\52\12\0\1\52\100\0"+
    "\1\53\30\0\1\16\2\0\6\16\1\110\4\16\1\213"+
    "\42\16\1\0\5\16\1\214\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\1\215\5\16\1\0\15\16\1\216\31\16"+
    "\1\0\6\16\1\107\13\0\2\16\76\217\1\220\1\221"+
    "\13\217\100\0\1\222\17\0\1\16\2\0\6\16\1\0"+
    "\47\16\1\0\6\16\1\107\13\0\1\16\1\223\34\0"+
    "\1\224\114\0\1\225\10\0\1\226\110\0\1\227\53\0"+
    "\1\230\20\0\1\231\42\0\1\230\51\0\1\232\6\0"+
    "\1\233\77\0\1\234\77\0\1\235\166\0\1\100\12\0"+
    "\1\100\20\0\1\236\63\0\1\236\24\0\1\16\2\0"+
    "\6\16\1\0\35\16\1\237\11\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\1\0\1\236\6\16\1\0"+
    "\47\16\1\0\4\16\1\240\1\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\47\16\2\0\5\16"+
    "\14\0\2\16\23\0\1\241\74\0\1\16\2\0\6\16"+
    "\1\242\47\16\1\0\5\16\1\243\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\11\16\1\244\35\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\3\16\1\245\2\16\1\0\14\16\1\246\32\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\30\16\1\247\16\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\21\16\1\250"+
    "\25\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\43\16\1\251\3\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\252\142\0\1\253\62\0"+
    "\1\16\2\0\6\16\1\0\2\16\1\254\44\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\1\255\46\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\20\16\1\256\26\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\1\257\46\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\30\16\1\260"+
    "\16\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\34\16\1\261\12\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\7\16\1\120\37\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\262\2\0\6\16\1\0\47\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\36\16\1\263\10\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\1\264\16\16\1\265"+
    "\27\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\266\46\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\4\16\1\267\1\16"+
    "\1\0\47\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\11\16\1\270\35\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\7\16\1\271\37\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\37\16\1\272"+
    "\7\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\15\16\1\273\31\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\1\274\5\16"+
    "\1\0\47\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\266\2\0\6\16\1\0\47\16\1\0\6\16\1\107"+
    "\13\0\2\16\41\0\1\275\56\0\1\16\2\0\6\16"+
    "\1\0\11\16\1\276\35\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\27\16\1\277"+
    "\17\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\22\16\1\300\24\16\1\0\6\16"+
    "\1\107\13\0\2\16\16\0\1\301\55\0\1\301\23\0"+
    "\1\16\2\0\6\16\1\302\47\16\1\0\5\16\1\303"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\301"+
    "\47\16\1\0\5\16\1\304\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\21\16\1\305\25\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\2\16\1\306\44\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\12\16\1\307"+
    "\34\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\310\46\16\1\0\6\16\1\107"+
    "\13\0\2\16\46\0\1\311\51\0\1\16\2\0\6\16"+
    "\1\0\27\16\1\312\17\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\47\16\1\0"+
    "\1\16\1\313\4\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\5\16\1\314\41\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\1\315\1\0\6\16"+
    "\1\0\47\16\1\0\3\16\1\316\2\16\1\107\13\0"+
    "\2\16\23\0\1\253\74\0\1\16\2\0\6\16\1\0"+
    "\25\16\1\277\21\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\4\16\1\277\42\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\2\16\1\317\3\16\1\0\47\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\31\16"+
    "\1\320\15\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\5\16\1\321\1\0\47\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\23\16\1\322\23\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\15\16\1\323\31\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\324\47\16\1\0\5\16\1\325\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\5\16\1\326\1\0\14\16"+
    "\1\327\17\16\1\330\12\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\23\16\1\331"+
    "\23\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\6\16\1\332\40\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\36\16\1\333\10\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\1\334\5\16\1\0\47\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\26\16\1\335\20\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\1\336\46\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\337\2\0"+
    "\6\16\1\0\47\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\6\16\1\340\40\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\341\2\0"+
    "\6\16\1\0\47\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\1\342\1\0\6\16\1\0\47\16\1\0"+
    "\3\16\1\343\2\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\4\16\1\344\42\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\345\2\0\6\16\1\0"+
    "\47\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\16\16\1\277\30\16\1\0\6\16"+
    "\1\107\13\0\2\16\76\217\1\346\1\221\13\217\101\222"+
    "\1\0\11\222\35\0\1\347\114\0\1\350\72\0\1\351"+
    "\141\0\1\347\67\0\1\347\133\0\1\347\63\0\1\352"+
    "\137\0\1\353\104\0\1\354\111\0\1\355\67\0\1\356"+
    "\107\0\1\16\2\0\6\16\1\0\7\16\1\357\37\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\1\360\5\16\1\0\47\16\1\0\6\16\1\107\13\0"+
    "\2\16\10\0\1\361\112\0\1\362\107\0\1\16\2\0"+
    "\1\363\5\16\1\0\47\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\2\16\1\364\3\16\1\0"+
    "\47\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\5\16\1\365\1\0\47\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\5\16"+
    "\1\366\41\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\5\16\1\367\41\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\1\370\46\16\1\0\6\16\1\107\13\0\2\16"+
    "\10\0\1\371\170\0\1\253\12\0\1\253\2\0\1\372"+
    "\13\0\1\16\2\0\6\16\1\0\3\16\1\214\43\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\3\16\1\373\2\16\1\0\47\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\20\16"+
    "\1\374\26\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\3\16\1\375\2\16\1\0\47\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\17\16\1\376\27\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\3\16\1\377\2\16\1\0"+
    "\47\16\1\0\6\16\1\107\13\0\2\16\5\0\1\u0100"+
    "\2\0\6\16\1\0\47\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\30\16\1\300"+
    "\16\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\45\16\1\u0101\1\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\2\16\1\u0102\44\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\2\16\1\u0103\3\16\1\0\30\16"+
    "\1\u0104\16\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\1\u0105\5\16\1\0\47\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\1\u0106\5\16"+
    "\1\0\47\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\1\u0107\5\16\1\0\47\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\4\16\1\u0108\42\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\47\16\1\253\6\16"+
    "\1\107\3\0\1\253\2\0\1\372\4\0\2\16\26\0"+
    "\1\u0109\125\0\1\u010a\56\0\1\16\2\0\6\16\1\0"+
    "\22\16\1\u010b\24\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\7\16\1\u010c\37\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\24\16\1\u010d\22\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\12\16"+
    "\1\u010e\34\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\41\16\1\u010f\5\16\1\0"+
    "\6\16\1\107\13\0\2\16\52\0\1\u0110\45\0\1\16"+
    "\2\0\6\16\1\0\33\16\1\u0111\13\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\3\16\1\u0107\43\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\2\16\1\u0112\3\16\1\0\47\16"+
    "\1\0\6\16\1\107\13\0\2\16\25\0\1\u0113\72\0"+
    "\1\16\2\0\6\16\1\0\6\16\1\u0114\40\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\30\16\1\u0115\16\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\5\16\1\u010b"+
    "\41\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\12\16\1\u0116\34\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\1\16\1\321\45\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\4\16\1\u0117\42\16"+
    "\1\0\6\16\1\107\13\0\2\16\10\0\1\u0118\107\0"+
    "\1\16\2\0\1\u0119\5\16\1\0\47\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\1\u011a\46\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\12\16\1\u011b\34\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\3\16"+
    "\1\u011c\2\16\1\0\47\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\15\16\1\u011d"+
    "\31\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\14\16\1\u011e\32\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\4\16\1\u011f\6\16\1\u0120\33\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\1\u0121\1\0\6\16\1\0"+
    "\47\16\1\0\3\16\1\u0122\2\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\u0123\47\16\1\0\5\16"+
    "\1\273\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\16\16\1\161\30\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\u0124\2\0\6\16\1\0\47\16\1\0"+
    "\6\16\1\107\13\0\2\16\23\0\1\u0125\74\0\1\16"+
    "\2\0\6\16\1\0\4\16\1\u0126\42\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\1\u0127\5\16"+
    "\1\0\47\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\1\u0128\5\16\1\0\47\16\1\0\6\16"+
    "\1\107\13\0\2\16\37\0\1\u0129\66\0\1\u012a\130\0"+
    "\1\u012b\101\0\1\352\115\0\1\u012c\120\0\1\u012d\113\0"+
    "\1\u012e\65\0\1\16\2\0\4\16\1\u012f\1\16\1\0"+
    "\47\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\2\16\1\u0130\3\16\1\0\47\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\31\16\1\u0131\15\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\2\16\1\u0132\3\16\1\0\47\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\3\16\1\u0133\2\16\1\0\47\16\1\0\6\16\1\107"+
    "\13\0\2\16\41\0\1\u0134\56\0\1\16\2\0\6\16"+
    "\1\0\12\16\1\u0135\34\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\21\16\1\277"+
    "\25\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\5\16\1\u0136\1\0\47\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\1\16\1\u0137\4\16"+
    "\1\0\47\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\21\16\1\u0108\25\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\5\16"+
    "\1\u0138\1\0\47\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\30\16\1\u0139\16\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\30\16\1\u0119\16\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\21\16"+
    "\1\u013a\25\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\13\16\1\u013b\33\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\13\16\1\u013c\33\16\1\0\6\16\1\107\13\0"+
    "\2\16\6\0\1\u013d\63\0\1\u013d\25\0\1\16\1\u013d"+
    "\1\0\6\16\1\0\47\16\1\0\3\16\1\u013e\2\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\1\363\46\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\5\16\1\u013f\1\0\47\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\42\16\1\u0140\4\16\1\0\6\16\1\107\13\0\2\16"+
    "\26\0\1\u0141\71\0\1\16\2\0\6\16\1\0\7\16"+
    "\1\u0142\37\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\1\357\46\16\1\0\6\16"+
    "\1\107\13\0\2\16\23\0\1\u0143\74\0\1\16\2\0"+
    "\6\16\1\0\4\16\1\u0144\42\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\40\16"+
    "\1\u0145\6\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\20\16\1\u0146\26\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\7\16\1\277\37\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\46\16\1\244"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\24\16\1\u0147\22\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\21\16"+
    "\1\u011f\25\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\37\16\1\u0148\7\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\12\16\1\u0149\34\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\1\336\5\16\1\0\47\16"+
    "\1\0\6\16\1\107\13\0\2\16\23\0\1\u014a\74\0"+
    "\1\16\2\0\6\16\1\0\4\16\1\u014b\42\16\1\0"+
    "\6\16\1\107\13\0\2\16\10\0\1\u014c\107\0\1\16"+
    "\2\0\6\16\1\0\13\16\1\u014d\33\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\22\16\1\u014e\24\16\1\0\6\16\1\107\13\0\2\16"+
    "\40\0\1\347\67\0\1\u014f\134\0\1\u0150\101\0\1\347"+
    "\127\0\1\u0151\54\0\1\16\2\0\5\16\1\u0152\1\0"+
    "\47\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\u0124\46\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\1\272"+
    "\46\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\u0142\46\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\12\16"+
    "\1\u0153\34\16\1\0\6\16\1\107\13\0\2\16\26\0"+
    "\1\u0154\71\0\1\16\2\0\5\16\1\u0155\1\0\47\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\1\u0156\46\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\1\16\1\u0157\4\16\1\0"+
    "\47\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\u0158\46\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\1\u0159"+
    "\46\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\2\16\1\u015a\44\16\1\0\6\16"+
    "\1\107\13\0\2\16\23\0\1\u015b\74\0\1\16\2\0"+
    "\6\16\1\0\4\16\1\u015c\42\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\21\16"+
    "\1\u0107\25\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\12\16\1\u015d\34\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\3\16"+
    "\1\u015e\2\16\1\0\47\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\17\16\1\u015f"+
    "\27\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\u0160\46\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\24\16"+
    "\1\u0161\22\16\1\0\6\16\1\107\13\0\2\16\46\0"+
    "\1\u0162\51\0\1\16\2\0\6\16\1\0\27\16\1\u0163"+
    "\17\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\7\16\1\u0164\37\16\1\0\6\16"+
    "\1\107\13\0\2\16\17\0\1\u0165\131\0\1\u0166\73\0"+
    "\1\u0167\100\0\1\16\2\0\2\16\1\360\3\16\1\0"+
    "\47\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\5\16\1\u0168\1\0\47\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\1\u0169"+
    "\46\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\277\46\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\12\16"+
    "\1\u016a\34\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\1\u013c\46\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\5\16\1\u016b"+
    "\1\0\47\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\3\16\1\u0164\43\16\1\0"+
    "\6\16\1\107\13\0\2\16\41\0\1\u016c\56\0\1\16"+
    "\2\0\6\16\1\0\22\16\1\u016d\24\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\1\u0163\46\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\2\16\1\u016e\3\16\1\0\47\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\20\16\1\277\26\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\1\16\1\u016f"+
    "\45\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\5\16\1\u0170\1\0\47\16\1\0\6\16\1\107"+
    "\13\0\2\16\17\0\1\347\132\0\1\347\73\0\1\u0171"+
    "\77\0\1\16\2\0\6\16\1\0\12\16\1\u0172\34\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\5\16\1\u0173\1\0\47\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\30\16\1\u0174"+
    "\16\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\5\16\1\u0175\1\0\47\16\1\0\6\16\1\107"+
    "\13\0\2\16\26\0\1\u0176\71\0\1\16\2\0\6\16"+
    "\1\0\7\16\1\u0177\37\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\24\16\1\u0178"+
    "\22\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\2\16\1\u0179\44\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\31\16\1\u017a\15\16\1\0\6\16\1\107\13\0\2\16"+
    "\21\0\1\u017b\76\0\1\16\2\0\6\16\1\0\2\16"+
    "\1\u017c\44\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\12\16\1\u017d\34\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\2\16"+
    "\1\u017e\3\16\1\0\47\16\1\0\6\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\1\u017f\46\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\12\16\1\u0180\34\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\5\16"+
    "\1\u0181\41\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\1\u0177\46\16\1\0\6\16"+
    "\1\107\13\0\2\16\24\0\1\u0182\73\0\1\16\2\0"+
    "\6\16\1\0\3\16\1\u0144\43\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\1\u0126"+
    "\46\16\1\0\6\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\5\16\1\u0183\41\16\1\0\6\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\1\u014d\46\16\1\0\6\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\2\16\1\u0184\44\16\1\0"+
    "\6\16\1\107\13\0\2\16\5\0\1\16\2\0\2\16"+
    "\1\277\3\16\1\0\47\16\1\0\6\16\1\107\13\0"+
    "\2\16\12\0\1\347\105\0\1\16\2\0\6\16\1\0"+
    "\21\16\1\u0185\25\16\1\0\6\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\3\16\1\u013b\43\16"+
    "\1\0\6\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\2\16\1\u0186\44\16\1\0\6\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\3\16"+
    "\1\u0148\43\16\1\0\6\16\1\107\13\0\2\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\45\1\1\11\2\1\7\11"+
    "\1\1\7\0\1\1\3\11\1\0\2\1\1\0\1\11"+
    "\10\1\2\0\27\1\1\0\7\1\1\0\4\1\1\0"+
    "\27\1\1\0\1\11\1\0\2\1\13\0\2\1\2\0"+
    "\7\1\2\0\21\1\1\11\3\1\2\0\6\1\1\0"+
    "\3\1\1\0\6\1\1\0\15\1\1\0\4\1\1\11"+
    "\6\0\1\11\2\1\1\0\1\11\6\1\1\0\1\11"+
    "\16\1\1\0\1\11\5\1\1\0\2\1\1\0\4\1"+
    "\1\11\10\1\1\0\1\1\1\0\1\1\1\11\3\1"+
    "\5\0\1\11\5\1\1\0\10\1\1\0\3\1\1\11"+
    "\1\1\1\11\6\1\1\0\1\1\1\11\2\1\3\0"+
    "\2\1\1\11\6\1\1\0\6\1\1\11\2\1\3\0"+
    "\4\1\1\0\4\1\1\0\4\1\1\11\4\1\1\0"+
    "\6\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  public _QueryGrammarLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QueryGrammarLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 58: break;
          case 2: 
            { return OP_LT;
            }
          case 59: break;
          case 3: 
            { return OP_GT;
            }
          case 60: break;
          case 4: 
            { return OP_EQ;
            }
          case 61: break;
          case 5: 
            { return ID_TOKEN;
            }
          case 62: break;
          case 6: 
            { return OP_IN;
            }
          case 63: break;
          case 7: 
            { return OP_AND;
            }
          case 64: break;
          case 8: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 65: break;
          case 9: 
            { return NUMBER;
            }
          case 66: break;
          case 10: 
            { return DOT;
            }
          case 67: break;
          case 11: 
            { return OP_DIV;
            }
          case 68: break;
          case 12: 
            { return ASTERISK;
            }
          case 69: break;
          case 13: 
            { return COMMA;
            }
          case 70: break;
          case 14: 
            { return LPAREN;
            }
          case 71: break;
          case 15: 
            { return RPAREN;
            }
          case 72: break;
          case 16: 
            { return SEMICOLON;
            }
          case 73: break;
          case 17: 
            { return OP_PLUS;
            }
          case 74: break;
          case 18: 
            { return OP_MINUS;
            }
          case 75: break;
          case 19: 
            { return OP_NEQ;
            }
          case 76: break;
          case 20: 
            { return OP_LTE;
            }
          case 77: break;
          case 21: 
            { return OP_GTE;
            }
          case 78: break;
          case 22: 
            { return OP_IS;
            }
          case 79: break;
          case 23: 
            { return ПОKEYWORD;
            }
          case 80: break;
          case 24: 
            { return OP_NOT;
            }
          case 81: break;
          case 25: 
            { return ONKEYWORD;
            }
          case 82: break;
          case 26: 
            { return OP_OR;
            }
          case 83: break;
          case 27: 
            { return ASKEYWORD;
            }
          case 84: break;
          case 28: 
            { return FROMKEYWORD;
            }
          case 85: break;
          case 29: 
            { return STRING;
            }
          case 86: break;
          case 30: 
            { return LINE_COMMENT;
            }
          case 87: break;
          case 31: 
            { return BYKEYWORD;
            }
          case 88: break;
          case 32: 
            { return ENDKEYWORD;
            }
          case 89: break;
          case 33: 
            { return ALLKEYWORD;
            }
          case 90: break;
          case 34: 
            { return TOPKEYWORD;
            }
          case 91: break;
          case 35: 
            { return ASCKEYWORD;
            }
          case 92: break;
          case 36: 
            { return WHEREKEYWORD;
            }
          case 93: break;
          case 37: 
            { return OP_LIKE;
            }
          case 94: break;
          case 38: 
            { return LEFTKEYWORD;
            }
          case 95: break;
          case 39: 
            { return ELSEKEYWORD;
            }
          case 96: break;
          case 40: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 1;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return AGGREGATIONFUNCTION;
            }
          case 97: break;
          case 41: 
            { return NULL;
            }
          case 98: break;
          case 42: 
            { return BOOL;
            }
          case 99: break;
          case 43: 
            { return THENKEYWORD;
            }
          case 100: break;
          case 44: 
            { return DESCKEYWORD;
            }
          case 101: break;
          case 45: 
            { return CASEKEYWORD;
            }
          case 102: break;
          case 46: 
            { return WHENKEYWORD;
            }
          case 103: break;
          case 47: 
            { return FULLKEYWORD;
            }
          case 104: break;
          case 48: 
            { return JOINKEYWORD;
            }
          case 105: break;
          case 49: 
            { return INNERKEYWORD;
            }
          case 106: break;
          case 50: 
            { return ORDERKEYWORD;
            }
          case 107: break;
          case 51: 
            { return OUTERKEYWORD;
            }
          case 108: break;
          case 52: 
            { return RIGHTKEYWORD;
            }
          case 109: break;
          case 53: 
            { return UNIONKEYWORD;
            }
          case 110: break;
          case 54: 
            { return GROUPKEYWORD;
            }
          case 111: break;
          case 55: 
            { return SELECTKEYWORD;
            }
          case 112: break;
          case 56: 
            { return HAVINGKEYWORD;
            }
          case 113: break;
          case 57: 
            { return DISTINCTKEYWORD;
            }
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
