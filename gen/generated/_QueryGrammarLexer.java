/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package generated;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static generated.GeneratedTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_QueryGrammarLexer.flex</tt>
 */
public class _QueryGrammarLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 7, 6]
   * Total runtime size is 2576 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>13]<<7)|((ch>>6)&0x7f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\206\2");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\12\3\1\6\1\7\110\3\1\10\45\3\1\11\1\12\2\3\1\13\73"+
    "\3\1\10\277\3");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\64\4\77\22\0\1\64\1\3\1\74\2\0\1\105\2\0\1\102\1\103\1\100\1\106\1"+
    "\101\1\107\1\73\1\76\12\65\1\0\1\104\1\1\1\4\1\2\2\0\1\22\1\110\1\30\1\23"+
    "\1\10\1\42\1\50\1\40\1\70\1\62\1\71\1\5\1\43\1\16\1\17\1\45\1\67\1\25\1\72"+
    "\1\20\1\51\1\55\1\37\1\67\1\111\1\67\1\0\1\75\4\0\1\22\1\110\1\30\1\23\1\10"+
    "\1\42\1\50\1\40\1\70\1\62\1\71\1\5\1\43\1\16\1\17\1\45\1\67\1\25\1\72\1\20"+
    "\1\51\1\55\1\37\1\67\1\111\1\67\12\0\1\77\32\0\1\64\217\0\2\6\115\0\1\27\20"+
    "\0\1\34\1\14\1\31\1\41\1\13\1\21\1\66\1\44\1\24\1\67\1\47\1\26\1\56\1\15\1"+
    "\12\1\11\1\33\1\52\1\35\1\53\3\67\1\46\1\63\1\60\1\61\1\32\1\36\1\67\1\57"+
    "\1\54\1\34\1\14\1\31\1\41\1\13\1\21\1\66\1\44\1\24\1\67\1\47\1\26\1\56\1\15"+
    "\1\12\1\11\1\33\1\52\1\35\1\53\3\67\1\46\1\63\1\60\1\61\1\32\1\36\1\67\1\57"+
    "\1\54\60\0\1\64\77\0\13\64\35\0\2\77\5\0\1\64\57\0\1\64\112\0\1\7\25\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\11\5\1\6\2\5\1\1\14\5\1\7\1\10\2\5"+
    "\1\11\1\1\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\5\1\23\1\24\1\25\1\0"+
    "\2\5\2\0\1\26\3\5\1\27\1\5\1\30\1\31"+
    "\5\5\2\32\1\0\3\5\1\33\2\5\1\0\3\5"+
    "\1\0\25\5\1\0\1\34\1\0\1\35\1\36\1\0"+
    "\2\5\1\0\7\5\1\37\1\5\1\40\1\6\2\41"+
    "\2\0\2\5\1\31\2\5\1\0\3\5\1\0\7\5"+
    "\1\42\3\5\1\32\1\5\1\0\5\5\1\0\3\5"+
    "\1\34\1\43\1\44\1\43\1\0\7\5\1\45\1\0"+
    "\2\46\3\5\1\0\2\5\1\0\5\5\1\0\1\5"+
    "\1\0\1\47\1\5\1\0\4\5\2\50\2\5\1\51"+
    "\5\5\1\52\1\53\1\0\3\5\2\54\1\0\4\5"+
    "\1\0\1\5\1\45\1\55\2\56\3\5\1\51\3\5"+
    "\1\0\2\5\1\57\4\5\2\60\3\5\1\57\1\5"+
    "\1\0\7\5\2\61\16\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\112\0\u0172\0\u01bc"+
    "\0\u0206\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c"+
    "\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c"+
    "\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac"+
    "\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u0a1e\0\112\0\u0a68\0\u0ab2"+
    "\0\112\0\112\0\112\0\112\0\112\0\112\0\112\0\112"+
    "\0\u0afc\0\112\0\112\0\112\0\u0b46\0\u0b90\0\u0bda\0\u0c24"+
    "\0\u0c6e\0\u0cb8\0\u0d02\0\u0d4c\0\u0d96\0\u0206\0\u0de0\0\u0206"+
    "\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6\0\u1030"+
    "\0\u107a\0\u10c4\0\u110e\0\u1158\0\u0206\0\u11a2\0\u11ec\0\u1236"+
    "\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486"+
    "\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6"+
    "\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926"+
    "\0\u1970\0\u0a68\0\112\0\u19ba\0\u1a04\0\u0206\0\u1a4e\0\u1a98"+
    "\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8"+
    "\0\u1d32\0\u0206\0\u1d7c\0\u0206\0\u0206\0\112\0\u0206\0\u1dc6"+
    "\0\u1e10\0\u1e5a\0\u1ea4\0\u0206\0\u1eee\0\u1f38\0\u1f82\0\u1fcc"+
    "\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c"+
    "\0\u2266\0\u22b0\0\u0206\0\u22fa\0\u2344\0\u238e\0\u0206\0\u23d8"+
    "\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2594\0\u25de\0\u2628"+
    "\0\u2672\0\u26bc\0\u0a68\0\112\0\u0206\0\u0206\0\u2706\0\u2750"+
    "\0\u279a\0\u27e4\0\u282e\0\u2878\0\u28c2\0\u290c\0\u0206\0\u2956"+
    "\0\112\0\u0206\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8\0\u2b12"+
    "\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce\0\u2d18\0\u2d62"+
    "\0\u2dac\0\u0206\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68"+
    "\0\112\0\u0206\0\u2fb2\0\u2ffc\0\112\0\u3046\0\u3090\0\u30da"+
    "\0\u3124\0\u316e\0\u0206\0\u0206\0\u31b8\0\u3202\0\u324c\0\u3296"+
    "\0\112\0\u0206\0\u32e0\0\u332a\0\u3374\0\u33be\0\u3408\0\u3452"+
    "\0\u349c\0\112\0\u0206\0\112\0\u0206\0\u34e6\0\u3530\0\u357a"+
    "\0\u0206\0\u35c4\0\u360e\0\u3658\0\u36a2\0\u36ec\0\u3736\0\112"+
    "\0\u3780\0\u37ca\0\u3814\0\u385e\0\112\0\u0206\0\u38a8\0\u38f2"+
    "\0\u393c\0\u0206\0\u3986\0\u39d0\0\u3a1a\0\u3a64\0\u3aae\0\u3af8"+
    "\0\u3b42\0\u3b8c\0\u3bd6\0\112\0\u0206\0\u3c20\0\u3c6a\0\u3cb4"+
    "\0\u3cfe\0\u3d48\0\u3d92\0\u3ddc\0\u3e26\0\u3e70\0\u3eba\0\u3f04"+
    "\0\u3f4e\0\u3f98\0\u3fe2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\2\11\1\14\1\15\1\16\1\17"+
    "\1\11\1\20\1\21\1\22\1\23\1\24\1\25\1\11"+
    "\1\26\1\11\1\27\3\11\1\30\1\31\1\32\1\33"+
    "\4\11\1\34\1\35\1\36\1\37\1\40\6\11\1\41"+
    "\1\11\1\42\1\43\2\11\1\44\1\11\1\45\1\46"+
    "\1\47\1\2\1\50\1\42\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\11\114\0\1\62"+
    "\1\0\1\63\111\0\1\64\111\0\1\62\112\0\1\11"+
    "\1\65\1\0\1\66\16\11\1\0\34\11\1\0\3\11"+
    "\1\67\2\11\1\70\14\0\2\11\16\0\1\71\100\0"+
    "\1\11\2\0\17\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\2\11\1\72\6\11"+
    "\1\73\5\11\1\0\3\11\1\74\30\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\4\11\1\75"+
    "\12\11\1\0\34\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\11\11\1\76\5\11\1\0\34\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\7\11\1\77\7\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\6\11\1\100\6\11"+
    "\1\101\1\11\1\0\21\11\1\102\12\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\7\11\1\103"+
    "\5\11\1\104\1\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\105\2\0\6\11\1\106\10\11"+
    "\1\107\34\11\1\0\5\11\1\110\1\70\14\0\2\11"+
    "\5\0\1\11\1\111\1\0\1\112\16\11\1\0\34\11"+
    "\1\0\3\11\1\113\2\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\16\11\1\114\1\0\14\11\1\115\5\11"+
    "\1\116\3\11\1\117\5\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\1\120\1\0\17\11\1\0\34\11"+
    "\1\0\3\11\1\121\2\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\2\11\1\122\6\11\1\123\5\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\10\0\1\124"+
    "\106\0\1\11\2\0\2\11\1\125\2\11\1\126\11\11"+
    "\1\0\2\11\1\127\17\11\1\130\11\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\4\11\1\131\27\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\17\11\1\0\10\11\1\132\23\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\12\11\1\133\4\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\3\11\1\134\13\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\12\11\1\135\2\11\1\136\1\11\1\0"+
    "\21\11\1\137\12\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\17\11\1\0\4\11\1\140\27\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\15\11\1\141\1\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\6\11\1\142\10\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\2\11\1\143\14\11\1\0\11\11\1\144"+
    "\22\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\1\11\1\145\2\11\1\146\12\11\1\0\34\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\7\11\1\147\7\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\64\0\1\42\12\0\1\42\77\0\1\43"+
    "\31\0\1\11\2\0\6\11\1\150\10\11\1\0\34\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\1\151\16\11\1\0\34\11\1\0\6\11\1\70\14\0"+
    "\2\11\74\152\1\153\1\154\14\152\76\0\1\155\20\0"+
    "\1\11\2\0\17\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\1\11\1\156\7\0\1\157\61\0\1\157\25\0"+
    "\1\11\2\0\17\11\1\0\12\11\1\160\21\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\1\0\1\157"+
    "\17\11\1\0\34\11\1\0\4\11\1\161\1\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\17\11\1\0\34\11"+
    "\2\0\5\11\15\0\2\11\16\0\1\162\100\0\1\11"+
    "\2\0\3\11\1\163\12\11\1\164\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\3\11\1\165\30\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\17\11\1\0\4\11\1\166"+
    "\27\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\17\11\1\0\31\11\1\167\2\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\10\11\1\76"+
    "\6\11\1\0\34\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\13\11\1\170\3\11\1\0\34\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\10\11\1\171\6\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\17\11\1\0\15\11"+
    "\1\172\16\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\21\11\1\173\12\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\174\2\0\17\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\13\11\1\175\3\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\30\0\1\176\66\0\1\11"+
    "\2\0\17\11\1\0\1\177\33\11\1\0\6\11\1\70"+
    "\14\0\2\11\27\0\1\200\42\0\1\200\24\0\1\11"+
    "\2\0\17\11\1\201\34\11\1\0\5\11\1\202\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\17\11\1\200\34\11"+
    "\1\0\5\11\1\203\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\14\11\1\204\2\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\5\11\1\205\26\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\11\11\1\206\5\11\1\0\34\11"+
    "\1\0\6\11\1\70\14\0\2\11\50\0\1\207\46\0"+
    "\1\11\2\0\17\11\1\0\20\11\1\210\13\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\34\11\1\0\1\11\1\211\4\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\17\11\1\0\1\11\1\212"+
    "\32\11\1\0\6\11\1\70\14\0\2\11\5\0\1\213"+
    "\111\0\1\11\2\0\17\11\1\0\14\11\1\214\17\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\11\11\1\215\5\11\1\0\23\11\1\216\10\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\4\11"+
    "\1\217\12\11\1\0\34\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\11\11\1\174\5\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\17\11\1\0\14\11\1\220\17\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\1\221\16\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\25\11\1\222\6\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\11\11"+
    "\1\223\5\11\1\0\34\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\224\2\0\17\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\7\11"+
    "\1\225\7\11\1\0\34\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\226\2\0\17\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\17\11\1\227\14\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\7\11\1\230\7\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\1\231\1\0\17\11\1\0\34\11\1\0\3\11\1\232"+
    "\2\11\1\70\14\0\2\11\5\0\1\11\2\0\11\11"+
    "\1\233\5\11\1\0\34\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\17\11\1\0\3\11\1\234"+
    "\30\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\2\11\1\235\14\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\2\11\1\236\31\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\1\237\1\0\17\11\1\0\34\11\1\0"+
    "\3\11\1\240\2\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\6\11\1\241\10\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\242\2\0\17\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\74\152\1\243"+
    "\1\154\14\152\77\155\1\0\12\155\10\0\1\244\106\0"+
    "\1\11\2\0\10\11\1\245\6\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\1\246"+
    "\16\11\1\0\34\11\1\0\6\11\1\70\14\0\2\11"+
    "\10\0\1\247\106\0\1\11\2\0\2\11\1\250\14\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\5\11\1\251\11\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\1\11\1\252\32\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\17\11\1\0\1\11\1\253"+
    "\32\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\11\11\1\254\5\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\1\255\16\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\1\256\16\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\1\257\16\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\20\0"+
    "\1\260\121\0\1\261\66\0\1\11\2\0\17\11\1\0"+
    "\1\262\33\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\10\11\1\263\6\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\14\11"+
    "\1\264\2\11\1\0\34\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\17\11\1\0\27\11\1\265"+
    "\4\11\1\0\6\11\1\70\14\0\2\11\40\0\1\266"+
    "\56\0\1\11\2\0\17\11\1\0\10\11\1\267\23\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\17\11\1\0\6\11\1\257\25\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\2\11\1\270\14\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\10\0"+
    "\1\271\106\0\1\11\2\0\17\11\1\0\3\11\1\177"+
    "\30\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\17\11\1\0\33\11\1\272\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\17\11\1\0\5\11"+
    "\1\273\26\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\3\11\1\274\30\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\16\11"+
    "\1\275\1\0\34\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\15\11\1\276\1\11\1\0\34\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\1\277"+
    "\1\0\17\11\1\0\34\11\1\0\3\11\1\300\2\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\17\11\1\301"+
    "\34\11\1\0\5\11\1\173\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\13\11\1\115\20\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\302\2\0\17\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\21\11\1\303\12\11\1\0"+
    "\6\11\1\70\14\0\2\11\17\0\1\304\77\0\1\11"+
    "\2\0\7\11\1\305\7\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\3\11\1\306"+
    "\13\11\1\0\34\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\17\11\1\0\23\11\1\307\10\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\17\11\1\0\3\11\1\310\30\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\17\11\1\0\1\11"+
    "\1\262\32\11\1\0\6\11\1\70\14\0\2\11\16\0"+
    "\1\311\100\0\1\11\2\0\6\11\1\312\10\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\1\313\16\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\1\314\16\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\25\0\1\315"+
    "\71\0\1\11\2\0\4\11\1\316\12\11\1\0\34\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\2\11\1\317\14\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\17\11\1\0\2\11"+
    "\1\320\31\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\2\11\1\321\14\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\3\11"+
    "\1\322\13\11\1\0\34\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\15\11\1\323\1\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\15\11\1\324\1\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\6\0\1\325\61\0\1\325\26\0"+
    "\1\11\1\325\1\0\17\11\1\0\34\11\1\0\3\11"+
    "\1\326\2\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\5\11\1\327\11\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\17\11\1\0\30\11"+
    "\1\330\3\11\1\0\6\11\1\70\14\0\2\11\20\0"+
    "\1\331\76\0\1\11\2\0\10\11\1\332\6\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\11\11\1\245\5\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\30\0\1\333\66\0\1\11\2\0"+
    "\5\11\1\334\11\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\17\11\1\0\3\11"+
    "\1\335\30\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\4\11\1\336\27\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\14\11"+
    "\1\337\2\11\1\0\34\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\1\223\16\11\1\0\34\11"+
    "\1\0\6\11\1\70\14\0\2\11\16\0\1\340\100\0"+
    "\1\11\2\0\6\11\1\341\10\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\10\0\1\342\106\0\1\11"+
    "\2\0\17\11\1\0\15\11\1\343\16\11\1\0\6\11"+
    "\1\70\14\0\2\11\16\0\1\344\100\0\1\11\2\0"+
    "\6\11\1\345\10\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\14\11\1\346\2\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\1\11\1\347\15\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\24\11\1\350\7\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\15\11\1\351\1\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\17\11\1\0\1\352\33\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\5\11\1\353\11\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\11\11\1\302\5\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\11\11"+
    "\1\172\5\11\1\0\34\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\11\11\1\332\5\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\14\11\1\354\2\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\16\0\1\355\100\0\1\11\2\0"+
    "\6\11\1\356\10\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\17\11\1\0\4\11"+
    "\1\257\27\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\14\11\1\357\2\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\20\0\1\360\76\0\1\11"+
    "\2\0\11\11\1\361\5\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\11\11\1\362"+
    "\5\11\1\0\34\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\17\11\1\0\5\11\1\363\26\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\17\11\1\0\16\11\1\364\15\11\1\0\6\11\1\70"+
    "\14\0\2\11\50\0\1\365\46\0\1\11\2\0\17\11"+
    "\1\0\20\11\1\366\13\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\5\11\1\367\11\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\1\11\1\370\15\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\3\11\1\371"+
    "\13\11\1\0\34\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\10\11\1\372\6\11\1\0\34\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\2\11\1\246\14\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\5\11\1\373\11\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\30\0"+
    "\1\374\66\0\1\11\2\0\17\11\1\0\1\375\33\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\11\11\1\366\5\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\11\11\1\324\5\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\5\11\1\376\11\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\6\11\1\372\25\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\5\11\1\377\11\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\11\11\1\u0100\5\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\14\11\1\u0101"+
    "\2\11\1\0\34\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\2\11\1\u0102\14\11\1\0\34\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\14\11\1\u0103\2\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\20\0\1\u0104\76\0\1\11\2\0\10\11"+
    "\1\u0105\6\11\1\0\34\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\5\11\1\u0106\11\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\17\11\1\0\2\11\1\u0107\31\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\5\11\1\u0108"+
    "\11\11\1\0\34\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\17\11\1\0\3\11\1\u0109\30\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\17\11\1\0\16\11\1\u010a\15\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\17\11\1\0\5\11"+
    "\1\u010b\26\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\11\11\1\u010c\5\11\1\0\34\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\11\11"+
    "\1\u0105\5\11\1\0\34\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\14\11\1\u010d\2\11\1\0"+
    "\34\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\2\11\1\u010e\14\11\1\0\34\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\14\11\1\u010f"+
    "\2\11\1\0\34\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\17\11\1\0\6\11\1\345\25\11"+
    "\1\0\6\11\1\70\14\0\2\11\5\0\1\11\2\0"+
    "\11\11\1\351\5\11\1\0\34\11\1\0\6\11\1\70"+
    "\14\0\2\11\5\0\1\11\2\0\11\11\1\312\5\11"+
    "\1\0\34\11\1\0\6\11\1\70\14\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\1\11\1\u0110\32\11\1\0"+
    "\6\11\1\70\14\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\5\11\1\u0111\26\11\1\0\6\11\1\70\14\0"+
    "\2\11\5\0\1\11\2\0\17\11\1\0\4\11\1\u0112"+
    "\27\11\1\0\6\11\1\70\14\0\2\11\5\0\1\11"+
    "\2\0\17\11\1\0\6\11\1\323\25\11\1\0\6\11"+
    "\1\70\14\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\5\11\1\u0113\26\11\1\0\6\11\1\70\14\0\2\11"+
    "\5\0\1\11\2\0\17\11\1\0\6\11\1\343\25\11"+
    "\1\0\6\11\1\70\14\0\2\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16428];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\37\1\1\11\2\1\10\11"+
    "\1\1\3\11\1\0\2\1\2\0\17\1\1\0\6\1"+
    "\1\0\3\1\1\0\25\1\1\0\1\11\1\0\2\1"+
    "\1\0\2\1\1\0\13\1\1\11\1\1\2\0\5\1"+
    "\1\0\3\1\1\0\15\1\1\0\5\1\1\0\4\1"+
    "\1\11\2\1\1\0\10\1\1\0\1\11\4\1\1\0"+
    "\2\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0"+
    "\4\1\1\11\3\1\1\11\7\1\1\0\3\1\1\11"+
    "\1\1\1\0\4\1\1\0\1\1\1\11\1\1\1\11"+
    "\10\1\1\0\2\1\1\11\4\1\1\11\6\1\1\0"+
    "\7\1\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _QueryGrammarLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QueryGrammarLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 50: break;
          case 2: 
            { return OP_LT;
            }
          case 51: break;
          case 3: 
            { return OP_GT;
            }
          case 52: break;
          case 4: 
            { return OP_EQ;
            }
          case 53: break;
          case 5: 
            { return ID_TOKEN;
            }
          case 54: break;
          case 6: 
            { return OP_AND;
            }
          case 55: break;
          case 7: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 56: break;
          case 8: 
            { return NUMBER;
            }
          case 57: break;
          case 9: 
            { return DOT;
            }
          case 58: break;
          case 10: 
            { return OP_DIV;
            }
          case 59: break;
          case 11: 
            { return ASTERISK;
            }
          case 60: break;
          case 12: 
            { return COMMA;
            }
          case 61: break;
          case 13: 
            { return LPAREN;
            }
          case 62: break;
          case 14: 
            { return RPAREN;
            }
          case 63: break;
          case 15: 
            { return SEMICOLON;
            }
          case 64: break;
          case 16: 
            { return OP_REM;
            }
          case 65: break;
          case 17: 
            { return OP_PLUS;
            }
          case 66: break;
          case 18: 
            { return OP_MINUS;
            }
          case 67: break;
          case 19: 
            { return OP_NEQ;
            }
          case 68: break;
          case 20: 
            { return OP_LTE;
            }
          case 69: break;
          case 21: 
            { return OP_GTE;
            }
          case 70: break;
          case 22: 
            { return ПОKEYWORD;
            }
          case 71: break;
          case 23: 
            { return OP_NOT;
            }
          case 72: break;
          case 24: 
            { return ONKEYWORD;
            }
          case 73: break;
          case 25: 
            { return OP_OR;
            }
          case 74: break;
          case 26: 
            { return ASKEYWORD;
            }
          case 75: break;
          case 27: 
            { return FROMKEYWORD;
            }
          case 76: break;
          case 28: 
            { return STRING;
            }
          case 77: break;
          case 29: 
            { return LINE_COMMENT;
            }
          case 78: break;
          case 30: 
            { return BYKEYWORD;
            }
          case 79: break;
          case 31: 
            { return TOPKEYWORD;
            }
          case 80: break;
          case 32: 
            { return ALLKEYWORD;
            }
          case 81: break;
          case 33: 
            { return ASCKEYWORD;
            }
          case 82: break;
          case 34: 
            { return WHEREKEYWORD;
            }
          case 83: break;
          case 35: 
            { return OP_LIKE;
            }
          case 84: break;
          case 36: 
            { return LEFTKEYWORD;
            }
          case 85: break;
          case 37: 
            { return BOOL;
            }
          case 86: break;
          case 38: 
            { return DESCKEYWORD;
            }
          case 87: break;
          case 39: 
            { return FULLKEYWORD;
            }
          case 88: break;
          case 40: 
            { return JOINKEYWORD;
            }
          case 89: break;
          case 41: 
            { return INNERKEYWORD;
            }
          case 90: break;
          case 42: 
            { return ORDERKEYWORD;
            }
          case 91: break;
          case 43: 
            { return OUTERKEYWORD;
            }
          case 92: break;
          case 44: 
            { return RIGHTKEYWORD;
            }
          case 93: break;
          case 45: 
            { return GROUPKEYWORD;
            }
          case 94: break;
          case 46: 
            { return UNIONKEYWORD;
            }
          case 95: break;
          case 47: 
            { return SELECTKEYWORD;
            }
          case 96: break;
          case 48: 
            { return HAVINGKEYWORD;
            }
          case 97: break;
          case 49: 
            { return DISTINCTKEYWORD;
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
