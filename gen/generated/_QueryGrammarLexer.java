/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package generated;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static generated.GeneratedTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_QueryGrammarLexer.flex</tt>
 */
public class _QueryGrammarLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 2184 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\6\2\1\3\44\2\1\4\22\2\1\5\37\2\1\4\237\2");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\6\4\2\22\0\1\6\1\4\1\13\2\0\1\23\1\0\1\11\1\20\1\21\1\15\1\24\1\17"+
    "\1\25\1\16\1\14\12\7\1\0\1\22\1\26\1\5\1\27\2\0\32\10\1\0\1\12\4\0\1\37\1"+
    "\60\1\43\1\40\1\33\1\44\1\56\1\52\1\31\1\105\1\32\1\30\1\45\1\34\1\35\1\50"+
    "\1\10\1\41\1\42\1\36\1\57\1\73\1\51\1\10\1\61\1\10\12\0\1\1\32\0\1\3\357\0"+
    "\40\10\1\70\1\101\1\67\1\53\1\54\1\55\1\110\1\47\1\46\2\10\1\107\1\74\1\104"+
    "\1\66\1\65\1\63\1\62\1\71\1\64\3\10\1\100\1\106\1\76\1\103\1\102\1\72\1\10"+
    "\1\75\1\77\60\0\1\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\30\5\1\22\1\0\1\23"+
    "\3\0\1\24\1\25\1\26\4\5\1\27\1\30\5\5"+
    "\1\31\7\5\1\32\7\5\1\33\5\5\1\34\7\5"+
    "\1\23\3\5\1\35\2\5\1\36\1\5\1\37\1\40"+
    "\1\41\13\5\1\42\11\5\1\43\6\5\1\44\1\45"+
    "\3\5\1\46\1\5\1\47\3\5\1\50\1\51\11\5"+
    "\1\52\3\5\1\53\2\5\1\54\1\5\1\55\1\56"+
    "\1\57\1\60\1\5\1\61\1\5\1\62\2\5\1\63"+
    "\1\5\1\64\1\65\10\5\1\66\1\5\1\67\1\70"+
    "\1\5\1\71\3\5\1\72\1\73\4\5\1\74\4\5"+
    "\1\75\1\5\1\76\13\5\1\77\1\5\1\100\1\101"+
    "\1\5\1\102\1\5\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\111\0\222\0\333\0\111\0\u0124\0\u016d"+
    "\0\u01b6\0\u01ff\0\u0248\0\111\0\111\0\111\0\111\0\111"+
    "\0\111\0\111\0\111\0\111\0\u0291\0\u02da\0\u0323\0\u036c"+
    "\0\u03b5\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4"+
    "\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc"+
    "\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\111\0\u01b6"+
    "\0\111\0\u09fb\0\u01ff\0\u0a44\0\u0a8d\0\111\0\111\0\u0ad6"+
    "\0\u0b1f\0\u0b68\0\u0bb1\0\u016d\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5"+
    "\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d"+
    "\0\u0f66\0\u0faf\0\u016d\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c"+
    "\0\u1165\0\u11ae\0\u016d\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b"+
    "\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563"+
    "\0\u01ff\0\u15ac\0\u15f5\0\u163e\0\u016d\0\u1687\0\u16d0\0\u016d"+
    "\0\u1719\0\u016d\0\u016d\0\u016d\0\u1762\0\u17ab\0\u17f4\0\u183d"+
    "\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u016d"+
    "\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84"+
    "\0\u1ccd\0\u016d\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83"+
    "\0\u016d\0\u016d\0\u1ecc\0\u1f15\0\u1f5e\0\u016d\0\u1fa7\0\u016d"+
    "\0\u1ff0\0\u2039\0\u2082\0\u016d\0\u016d\0\u20cb\0\u2114\0\u215d"+
    "\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\u016d\0\u235c"+
    "\0\u23a5\0\u23ee\0\u016d\0\u2437\0\u2480\0\u016d\0\u24c9\0\u016d"+
    "\0\u016d\0\u016d\0\u016d\0\u2512\0\u016d\0\u255b\0\u016d\0\u25a4"+
    "\0\u25ed\0\u016d\0\u2636\0\u016d\0\u016d\0\u267f\0\u26c8\0\u2711"+
    "\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u016d\0\u28c7\0\u016d"+
    "\0\u016d\0\u2910\0\u016d\0\u2959\0\u29a2\0\u29eb\0\u016d\0\u016d"+
    "\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u016d\0\u2b58\0\u2ba1\0\u2bea"+
    "\0\u2c33\0\u016d\0\u2c7c\0\u016d\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0"+
    "\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u016d"+
    "\0\u2fe8\0\u016d\0\u016d\0\u3031\0\u016d\0\u307a\0\u016d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\4\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\2\10\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\10\1\40\1\10\1\41\2\10\1\42"+
    "\1\43\1\44\2\10\1\45\1\46\1\47\1\10\1\50"+
    "\1\10\1\51\1\52\1\53\1\54\15\10\1\55\1\10"+
    "\1\56\1\10\113\0\1\4\3\0\1\4\107\0\1\57"+
    "\112\0\1\7\110\0\2\10\17\0\61\10\11\60\1\61"+
    "\1\62\76\60\12\63\1\64\1\61\75\63\14\0\1\65"+
    "\101\0\1\66\110\0\1\67\112\0\2\10\17\0\1\10"+
    "\1\70\1\10\1\71\55\10\7\0\2\10\17\0\4\10"+
    "\1\72\54\10\7\0\2\10\17\0\5\10\1\73\53\10"+
    "\7\0\2\10\17\0\4\10\1\74\4\10\1\75\15\10"+
    "\1\76\31\10\7\0\2\10\17\0\5\10\1\77\3\10"+
    "\1\100\47\10\7\0\2\10\17\0\1\101\3\10\1\102"+
    "\5\10\1\103\46\10\7\0\2\10\17\0\1\10\1\104"+
    "\1\10\1\105\55\10\7\0\2\10\17\0\1\10\1\106"+
    "\57\10\7\0\2\10\17\0\3\10\1\107\55\10\7\0"+
    "\2\10\17\0\7\10\1\110\1\10\1\111\15\10\1\112"+
    "\31\10\7\0\2\10\17\0\17\10\1\113\12\10\1\114"+
    "\11\10\1\115\14\10\7\0\2\10\17\0\22\10\1\116"+
    "\36\10\7\0\2\10\17\0\7\10\1\117\51\10\7\0"+
    "\2\10\17\0\24\10\1\120\34\10\7\0\2\10\17\0"+
    "\11\10\1\121\47\10\7\0\2\10\17\0\4\10\1\122"+
    "\54\10\7\0\2\10\17\0\31\10\1\123\27\10\7\0"+
    "\2\10\17\0\23\10\1\124\12\10\1\125\22\10\7\0"+
    "\2\10\17\0\35\10\1\126\13\10\1\127\7\10\7\0"+
    "\2\10\17\0\33\10\1\130\2\10\1\131\22\10\7\0"+
    "\2\10\17\0\51\10\1\132\7\10\7\0\2\10\17\0"+
    "\32\10\1\133\3\10\1\134\15\10\1\135\4\10\7\0"+
    "\2\10\17\0\5\10\1\136\53\10\7\0\2\10\17\0"+
    "\25\10\1\137\10\10\1\140\22\10\1\60\2\0\106\60"+
    "\12\63\1\64\1\141\75\63\1\65\2\0\106\65\7\0"+
    "\2\10\17\0\2\10\1\142\56\10\7\0\2\10\17\0"+
    "\14\10\1\143\44\10\7\0\2\10\17\0\4\10\1\144"+
    "\54\10\7\0\2\10\17\0\6\10\1\145\52\10\7\0"+
    "\2\10\17\0\10\10\1\146\50\10\7\0\2\10\17\0"+
    "\6\10\1\147\52\10\7\0\2\10\17\0\20\10\1\150"+
    "\40\10\7\0\2\10\17\0\27\10\1\151\31\10\7\0"+
    "\2\10\17\0\1\152\60\10\7\0\2\10\17\0\10\10"+
    "\1\153\50\10\7\0\2\10\17\0\13\10\1\154\45\10"+
    "\7\0\2\10\17\0\12\10\1\155\46\10\7\0\2\10"+
    "\17\0\12\10\1\156\46\10\7\0\2\10\17\0\26\10"+
    "\1\157\32\10\7\0\2\10\17\0\1\160\60\10\7\0"+
    "\2\10\17\0\1\161\60\10\7\0\2\10\17\0\5\10"+
    "\1\162\53\10\7\0\2\10\17\0\1\163\60\10\7\0"+
    "\2\10\17\0\41\10\1\164\17\10\7\0\2\10\17\0"+
    "\25\10\1\165\33\10\7\0\2\10\17\0\3\10\1\166"+
    "\55\10\7\0\2\10\17\0\43\10\1\167\15\10\7\0"+
    "\2\10\17\0\25\10\1\170\33\10\7\0\2\10\17\0"+
    "\5\10\1\171\53\10\7\0\2\10\17\0\1\10\1\172"+
    "\57\10\7\0\2\10\17\0\33\10\1\173\25\10\7\0"+
    "\2\10\17\0\25\10\1\174\33\10\7\0\2\10\17\0"+
    "\36\10\1\175\22\10\7\0\2\10\17\0\52\10\1\176"+
    "\6\10\7\0\2\10\17\0\40\10\1\177\20\10\7\0"+
    "\2\10\17\0\57\10\1\200\1\10\7\0\2\10\17\0"+
    "\53\10\1\201\5\10\7\0\2\10\17\0\25\10\1\202"+
    "\33\10\7\0\2\10\17\0\17\10\1\203\41\10\7\0"+
    "\2\10\17\0\25\10\1\204\6\10\1\205\24\10\7\0"+
    "\2\10\17\0\1\10\1\206\57\10\7\0\2\10\17\0"+
    "\37\10\1\207\21\10\7\0\2\10\17\0\60\10\1\210"+
    "\7\0\2\10\17\0\3\10\1\211\55\10\7\0\2\10"+
    "\17\0\6\10\1\212\52\10\7\0\2\10\17\0\3\10"+
    "\1\213\55\10\7\0\2\10\17\0\3\10\1\214\55\10"+
    "\7\0\2\10\17\0\3\10\1\215\55\10\7\0\2\10"+
    "\17\0\3\10\1\216\55\10\7\0\2\10\17\0\6\10"+
    "\1\217\52\10\7\0\2\10\17\0\13\10\1\220\45\10"+
    "\7\0\2\10\17\0\22\10\1\221\36\10\7\0\2\10"+
    "\17\0\3\10\1\222\55\10\7\0\2\10\17\0\12\10"+
    "\1\223\46\10\7\0\2\10\17\0\15\10\1\224\43\10"+
    "\7\0\2\10\17\0\1\225\60\10\7\0\2\10\17\0"+
    "\16\10\1\226\42\10\7\0\2\10\17\0\45\10\1\227"+
    "\13\10\7\0\2\10\17\0\11\10\1\230\47\10\7\0"+
    "\2\10\17\0\1\10\1\231\57\10\7\0\2\10\17\0"+
    "\27\10\1\232\31\10\7\0\2\10\17\0\5\10\1\233"+
    "\53\10\7\0\2\10\17\0\34\10\1\234\24\10\7\0"+
    "\2\10\17\0\24\10\1\235\34\10\7\0\2\10\17\0"+
    "\33\10\1\236\25\10\7\0\2\10\17\0\37\10\1\237"+
    "\21\10\7\0\2\10\17\0\37\10\1\240\21\10\7\0"+
    "\2\10\17\0\54\10\1\241\4\10\7\0\2\10\17\0"+
    "\25\10\1\242\33\10\7\0\2\10\17\0\33\10\1\243"+
    "\25\10\7\0\2\10\17\0\56\10\1\244\2\10\7\0"+
    "\2\10\17\0\41\10\1\245\17\10\7\0\2\10\17\0"+
    "\4\10\1\246\54\10\7\0\2\10\17\0\36\10\1\247"+
    "\22\10\7\0\2\10\17\0\42\10\1\250\16\10\7\0"+
    "\2\10\17\0\11\10\1\251\47\10\7\0\2\10\17\0"+
    "\11\10\1\252\47\10\7\0\2\10\17\0\11\10\1\253"+
    "\47\10\7\0\2\10\17\0\1\10\1\254\57\10\7\0"+
    "\2\10\17\0\6\10\1\255\52\10\7\0\2\10\17\0"+
    "\13\10\1\256\45\10\7\0\2\10\17\0\3\10\1\257"+
    "\55\10\7\0\2\10\17\0\54\10\1\260\4\10\7\0"+
    "\2\10\17\0\46\10\1\261\12\10\7\0\2\10\17\0"+
    "\3\10\1\262\55\10\7\0\2\10\17\0\4\10\1\263"+
    "\54\10\7\0\2\10\17\0\20\10\1\264\40\10\7\0"+
    "\2\10\17\0\4\10\1\265\54\10\7\0\2\10\17\0"+
    "\35\10\1\266\23\10\7\0\2\10\17\0\16\10\1\267"+
    "\42\10\7\0\2\10\17\0\47\10\1\270\11\10\7\0"+
    "\2\10\17\0\36\10\1\271\22\10\7\0\2\10\17\0"+
    "\36\10\1\272\22\10\7\0\2\10\17\0\24\10\1\273"+
    "\34\10\7\0\2\10\17\0\54\10\1\274\4\10\7\0"+
    "\2\10\17\0\33\10\1\275\25\10\7\0\2\10\17\0"+
    "\25\10\1\276\33\10\7\0\2\10\17\0\4\10\1\277"+
    "\54\10\7\0\2\10\17\0\6\10\1\300\52\10\7\0"+
    "\2\10\17\0\40\10\1\301\20\10\7\0\2\10\17\0"+
    "\16\10\1\302\42\10\7\0\2\10\17\0\26\10\1\303"+
    "\32\10\7\0\2\10\17\0\35\10\1\304\23\10\7\0"+
    "\2\10\17\0\54\10\1\305\4\10\7\0\2\10\17\0"+
    "\24\10\1\306\34\10\7\0\2\10\17\0\25\10\1\307"+
    "\33\10\7\0\2\10\17\0\25\10\1\310\33\10\7\0"+
    "\2\10\17\0\16\10\1\311\42\10\7\0\2\10\17\0"+
    "\25\10\1\312\33\10\7\0\2\10\17\0\25\10\1\313"+
    "\33\10\7\0\2\10\17\0\13\10\1\314\45\10\7\0"+
    "\2\10\17\0\25\10\1\315\33\10\7\0\2\10\17\0"+
    "\16\10\1\316\42\10\7\0\2\10\17\0\25\10\1\317"+
    "\33\10\7\0\2\10\17\0\36\10\1\320\22\10\7\0"+
    "\2\10\17\0\54\10\1\321\4\10\7\0\2\10\17\0"+
    "\25\10\1\322\33\10\7\0\2\10\17\0\54\10\1\323"+
    "\4\10\7\0\2\10\17\0\6\10\1\324\52\10\7\0"+
    "\2\10\17\0\33\10\1\325\25\10\7\0\2\10\17\0"+
    "\54\10\1\326\4\10\7\0\2\10\17\0\50\10\1\327"+
    "\10\10\7\0\2\10\17\0\16\10\1\330\42\10\7\0"+
    "\2\10\17\0\54\10\1\331\4\10\7\0\2\10\17\0"+
    "\36\10\1\332\22\10\7\0\2\10\17\0\16\10\1\333"+
    "\42\10\7\0\2\10\17\0\16\10\1\334\42\10\7\0"+
    "\2\10\17\0\41\10\1\335\17\10\7\0\2\10\17\0"+
    "\25\10\1\336\33\10\7\0\2\10\17\0\37\10\1\337"+
    "\21\10\7\0\2\10\17\0\25\10\1\340\33\10\7\0"+
    "\2\10\17\0\41\10\1\341\17\10\7\0\2\10\17\0"+
    "\42\10\1\342\16\10\7\0\2\10\17\0\25\10\1\343"+
    "\33\10\7\0\2\10\17\0\40\10\1\344\20\10\7\0"+
    "\2\10\17\0\42\10\1\345\16\10\7\0\2\10\17\0"+
    "\41\10\1\346\17\10\7\0\2\10\17\0\42\10\1\347"+
    "\16\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12483];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\5\1\11\11\32\1\1\11"+
    "\1\0\1\11\3\0\1\1\2\11\260\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _QueryGrammarLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QueryGrammarLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 68: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 69: break;
          case 3: 
            { return OP_EQ;
            }
          case 70: break;
          case 4: 
            { return NUMBER;
            }
          case 71: break;
          case 5: 
            { return IDSIMPLE;
            }
          case 72: break;
          case 6: 
            { return OP_DIV;
            }
          case 73: break;
          case 7: 
            { return ASTERISK;
            }
          case 74: break;
          case 8: 
            { return DOT;
            }
          case 75: break;
          case 9: 
            { return COMMA;
            }
          case 76: break;
          case 10: 
            { return LPAREN;
            }
          case 77: break;
          case 11: 
            { return RPAREN;
            }
          case 78: break;
          case 12: 
            { return SEMICOLON;
            }
          case 79: break;
          case 13: 
            { return OP_REM;
            }
          case 80: break;
          case 14: 
            { return OP_PLUS;
            }
          case 81: break;
          case 15: 
            { return OP_MINUS;
            }
          case 82: break;
          case 16: 
            { return OP_LT;
            }
          case 83: break;
          case 17: 
            { return OP_GT;
            }
          case 84: break;
          case 18: 
            { return OP_NEQ;
            }
          case 85: break;
          case 19: 
            { return STRING;
            }
          case 86: break;
          case 20: 
            { return LINE_COMMENT;
            }
          case 87: break;
          case 21: 
            { return OP_LTE;
            }
          case 88: break;
          case 22: 
            { return OP_GTE;
            }
          case 89: break;
          case 23: 
            { return ON;
            }
          case 90: break;
          case 24: 
            { return OP_OR;
            }
          case 91: break;
          case 25: 
            { return AS;
            }
          case 92: break;
          case 26: 
            { return ИЗ;
            }
          case 93: break;
          case 27: 
            { return BY;
            }
          case 94: break;
          case 28: 
            { return ПО;
            }
          case 95: break;
          case 29: 
            { return OP_NOT;
            }
          case 96: break;
          case 30: 
            { return TOP;
            }
          case 97: break;
          case 31: 
            { return ALL;
            }
          case 98: break;
          case 32: 
            { return OP_AND;
            }
          case 99: break;
          case 33: 
            { return ASC;
            }
          case 100: break;
          case 34: 
            { return ГДЕ;
            }
          case 101: break;
          case 35: 
            { return ВСЕ;
            }
          case 102: break;
          case 36: 
            { return OP_LIKE;
            }
          case 103: break;
          case 37: 
            { return LEFT;
            }
          case 104: break;
          case 38: 
            { return TRUE;
            }
          case 105: break;
          case 39: 
            { return DESC;
            }
          case 106: break;
          case 40: 
            { return FROM;
            }
          case 107: break;
          case 41: 
            { return FULL;
            }
          case 108: break;
          case 42: 
            { return УБЫВ;
            }
          case 109: break;
          case 43: 
            { return ВОЗР;
            }
          case 110: break;
          case 44: 
            { return JOIN;
            }
          case 111: break;
          case 45: 
            { return ЛОЖЬ;
            }
          case 112: break;
          case 46: 
            { return INNER;
            }
          case 113: break;
          case 47: 
            { return ORDER;
            }
          case 114: break;
          case 48: 
            { return OUTER;
            }
          case 115: break;
          case 49: 
            { return RIGHT;
            }
          case 116: break;
          case 50: 
            { return FALSE;
            }
          case 117: break;
          case 51: 
            { return WHERE;
            }
          case 118: break;
          case 52: 
            { return GROUP;
            }
          case 119: break;
          case 53: 
            { return UNION;
            }
          case 120: break;
          case 54: 
            { return ЛЕВОЕ;
            }
          case 121: break;
          case 55: 
            { return SELECT;
            }
          case 122: break;
          case 56: 
            { return ИСТИНА;
            }
          case 123: break;
          case 57: 
            { return HAVING;
            }
          case 124: break;
          case 58: 
            { return ПРАВОЕ;
            }
          case 125: break;
          case 59: 
            { return ПОЛНОЕ;
            }
          case 126: break;
          case 60: 
            { return ИМЕЮЩИЕ;
            }
          case 127: break;
          case 61: 
            { return ВНЕШНЕЕ;
            }
          case 128: break;
          case 62: 
            { return DISTINCT;
            }
          case 129: break;
          case 63: 
            { return СОЕДИНЕНИЕ;
            }
          case 130: break;
          case 64: 
            { return ОБЪЕДИНИТЬ;
            }
          case 131: break;
          case 65: 
            { return ВНУТРЕННЕЕ;
            }
          case 132: break;
          case 66: 
            { return УПОРЯДОЧИТЬ;
            }
          case 133: break;
          case 67: 
            { return СГРУППИРОВАТЬ;
            }
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
