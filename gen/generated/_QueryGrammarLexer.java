/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package generated;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static generated.GeneratedTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_QueryGrammarLexer.flex</tt>
 */
public class _QueryGrammarLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 7, 6]
   * Total runtime size is 2576 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>13]<<7)|((ch>>6)&0x7f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\206\2");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\12\3\1\6\1\7\110\3\1\10\45\3\1\11\1\12\2\3\1\13\73"+
    "\3\1\10\277\3");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\66\4\102\22\0\1\66\1\3\1\77\5\0\1\105\1\106\1\103\1\110\1\104\1\111"+
    "\1\76\1\101\12\67\1\0\1\107\1\1\1\4\1\2\2\0\1\27\1\112\1\41\1\30\1\10\1\54"+
    "\1\46\1\52\1\72\1\63\1\73\1\5\1\35\1\23\1\25\1\56\1\71\1\32\1\74\1\26\1\34"+
    "\1\45\1\51\1\44\1\113\1\71\1\0\1\100\2\0\1\75\1\0\1\27\1\112\1\41\1\30\1\10"+
    "\1\54\1\46\1\52\1\72\1\63\1\73\1\5\1\35\1\23\1\25\1\56\1\71\1\32\1\74\1\26"+
    "\1\34\1\45\1\51\1\44\1\113\1\71\12\0\1\102\32\0\1\66\217\0\2\6\115\0\1\16"+
    "\20\0\1\40\1\14\1\24\1\53\1\13\1\17\1\70\1\55\1\31\1\71\1\42\1\33\1\37\1\15"+
    "\1\12\1\11\1\47\1\20\1\21\1\36\2\71\1\65\1\43\1\64\1\61\1\62\1\50\1\22\1\71"+
    "\1\60\1\57\1\40\1\14\1\24\1\53\1\13\1\17\1\70\1\55\1\31\1\71\1\42\1\33\1\37"+
    "\1\15\1\12\1\11\1\47\1\20\1\21\1\36\2\71\1\65\1\43\1\64\1\61\1\62\1\50\1\22"+
    "\1\71\1\60\1\57\60\0\1\66\77\0\13\66\35\0\2\102\5\0\1\66\57\0\1\66\112\0\1"+
    "\7\25\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\5\5\1\1\4\5\1\6\4\5\1\7\17\5\1\10"+
    "\1\11\2\5\1\12\1\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\5\10\0\1\23\1\24"+
    "\1\25\1\0\2\5\1\0\1\26\1\6\2\5\1\27"+
    "\3\5\1\30\2\0\14\5\1\31\1\32\5\5\1\33"+
    "\2\5\1\33\1\0\6\5\1\34\1\0\4\5\1\0"+
    "\23\5\1\6\1\26\2\5\1\0\1\35\1\0\1\36"+
    "\1\37\13\0\3\5\2\0\1\5\1\40\5\5\2\0"+
    "\12\5\1\41\3\5\1\42\2\5\1\43\1\7\1\5"+
    "\1\43\2\0\4\5\1\32\1\5\1\0\3\5\1\0"+
    "\6\5\1\0\4\5\1\33\4\5\1\44\3\5\1\0"+
    "\3\5\1\35\7\0\1\45\1\46\1\45\1\0\2\47"+
    "\5\5\1\0\1\50\5\5\1\51\6\5\1\52\1\53"+
    "\1\0\2\54\4\5\1\0\2\5\1\0\4\5\2\55"+
    "\5\5\1\56\1\5\1\0\1\5\1\0\1\57\2\60"+
    "\2\5\5\0\1\61\5\5\1\0\6\5\1\62\1\63"+
    "\1\0\3\5\2\64\2\65\3\5\1\66\1\5\1\0"+
    "\1\5\1\52\1\61\1\5\3\0\2\5\1\67\6\5"+
    "\1\0\6\5\2\70\1\67\3\0\4\5\1\0\4\5"+
    "\1\0\4\5\2\71\3\5\1\0\6\5\1\0\4\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\344"+
    "\0\u0214\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428"+
    "\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688"+
    "\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\u08e8"+
    "\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48"+
    "\0\u0b94\0\u0be0\0\u0c2c\0\u0c78\0\u0cc4\0\344\0\u0d10\0\u0d5c"+
    "\0\344\0\344\0\344\0\344\0\344\0\344\0\344\0\u0da8"+
    "\0\u0df4\0\u0e40\0\u0e8c\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\u1008"+
    "\0\344\0\344\0\344\0\u1054\0\u10a0\0\u10ec\0\u1138\0\344"+
    "\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4\0\u1300\0\u134c\0\u0390"+
    "\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac"+
    "\0\u15f8\0\u1644\0\u1690\0\u16dc\0\u1728\0\u1774\0\u0390\0\u17c0"+
    "\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c\0\u1988\0\u19d4\0\u1a20"+
    "\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u1c34\0\u1c80"+
    "\0\u0390\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94"+
    "\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\u20a8\0\u20f4"+
    "\0\u2140\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354"+
    "\0\u23a0\0\u23ec\0\u2438\0\u0390\0\u2484\0\u24d0\0\u0d10\0\344"+
    "\0\u251c\0\u2568\0\u0390\0\u25b4\0\u2600\0\u264c\0\u2698\0\u26e4"+
    "\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8\0\u2944"+
    "\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u0390\0\u2ac0\0\u2b0c\0\u2b58"+
    "\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8"+
    "\0\u2e04\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34\0\u2f80\0\u0390\0\u2fcc"+
    "\0\u3018\0\u3064\0\u0390\0\u30b0\0\u30fc\0\344\0\u0390\0\u3148"+
    "\0\u0390\0\u3194\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310\0\u0390"+
    "\0\u335c\0\u33a8\0\u33f4\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570"+
    "\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u36ec\0\u3738\0\u3784\0\u37d0"+
    "\0\u381c\0\u0390\0\u3868\0\u38b4\0\u3900\0\u394c\0\u0390\0\u3998"+
    "\0\u39e4\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\u0d10\0\344"+
    "\0\u3bac\0\u3bf8\0\u3c44\0\u3c90\0\u3cdc\0\u3d28\0\344\0\u0390"+
    "\0\u0390\0\u3d74\0\344\0\u0390\0\u3dc0\0\u3e0c\0\u3e58\0\u3ea4"+
    "\0\u3ef0\0\u3f3c\0\344\0\u3f88\0\u3fd4\0\u4020\0\u406c\0\u40b8"+
    "\0\u0390\0\u4104\0\u4150\0\u419c\0\u41e8\0\u4234\0\u4280\0\u0390"+
    "\0\u0390\0\u42cc\0\344\0\u0390\0\u4318\0\u4364\0\u43b0\0\u43fc"+
    "\0\u4448\0\u4494\0\u44e0\0\u452c\0\u4578\0\u45c4\0\u4610\0\u465c"+
    "\0\344\0\u0390\0\u46a8\0\u46f4\0\u4740\0\u478c\0\u47d8\0\u0390"+
    "\0\u4824\0\u4870\0\u48bc\0\u4908\0\u0390\0\344\0\u0390\0\u4954"+
    "\0\u49a0\0\u49ec\0\u4a38\0\u4a84\0\u4ad0\0\u4b1c\0\344\0\u4b68"+
    "\0\u4bb4\0\u4c00\0\u4c4c\0\u4c98\0\u4ce4\0\u4d30\0\u4d7c\0\u4dc8"+
    "\0\u4e14\0\u4e60\0\u4eac\0\u0390\0\u0390\0\u4ef8\0\u4f44\0\u4f90"+
    "\0\u4fdc\0\344\0\u0390\0\344\0\u0390\0\u5028\0\u5074\0\u50c0"+
    "\0\u0390\0\u510c\0\u5158\0\u51a4\0\344\0\u0390\0\u51f0\0\u523c"+
    "\0\u5288\0\u52d4\0\u5320\0\u536c\0\344\0\u53b8\0\u5404\0\u5450"+
    "\0\u549c\0\u54e8\0\u5534\0\u5580\0\u55cc\0\u5618\0\u5664\0\u56b0"+
    "\0\u56fc\0\u5748\0\344\0\u0390\0\u0390\0\u5794\0\u57e0\0\u582c"+
    "\0\u5878\0\u58c4\0\u5910\0\u595c\0\u59a8\0\u59f4\0\u5a40\0\u5a8c"+
    "\0\u5ad8\0\u5b24\0\u5b70\0\u5bbc\0\u5c08\0\u5c54\0\344\0\u0390"+
    "\0\u5ca0\0\u5cec\0\u5d38\0\u5d84\0\u5dd0\0\u5e1c\0\u5e68\0\u5eb4"+
    "\0\u5f00\0\u5f4c\0\u5f98\0\u5fe4\0\u6030\0\u607c\0\u60c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\2\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\16\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\16"+
    "\1\41\1\42\3\16\1\43\1\44\1\16\1\45\1\46"+
    "\1\47\1\50\6\16\1\51\2\16\1\52\1\53\2\16"+
    "\1\54\1\16\1\55\1\4\1\56\1\57\1\4\1\60"+
    "\1\52\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\16\16\0\1\71\1\0\1\72\6\0\1\73"+
    "\5\0\1\74\1\0\1\75\1\0\1\76\1\77\31\0"+
    "\1\71\124\0\1\100\124\0\1\101\1\0\1\102\113\0"+
    "\1\103\113\0\1\101\114\0\1\16\1\104\1\0\1\105"+
    "\5\16\1\0\47\16\1\0\3\16\1\106\3\16\1\107"+
    "\13\0\2\16\16\0\1\110\4\0\1\111\50\0\1\110"+
    "\24\0\1\112\2\0\6\16\1\0\4\16\1\113\42\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\2\16\1\114\3\16\1\0\1\115\27\16\1\116\16\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\4\16\1\117\1\16\1\0\47\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\47\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\1\120\46\16\1\0\7\16\1\107\13\0"+
    "\2\16\10\0\1\121\23\0\1\122\64\0\1\16\2\0"+
    "\6\16\1\0\1\16\1\123\45\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\2\16\1\124\3\16"+
    "\1\0\17\16\1\125\10\16\1\126\3\16\1\127\12\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\2\16\1\130\3\16\1\0\47\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\6\16"+
    "\1\131\6\16\1\132\31\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\2\16\1\133\2\16\1\134"+
    "\1\0\1\16\1\135\27\16\1\136\15\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\4\16\1\137\6\16\1\140\1\16\1\141\31\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\6\16\1\142\4\16\1\143\17\16\1\144\13\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\145\2\0"+
    "\6\16\1\146\4\16\1\147\21\16\1\150\20\16\1\0"+
    "\5\16\1\151\1\16\1\107\13\0\2\16\5\0\1\16"+
    "\1\152\1\0\1\153\5\16\1\0\47\16\1\0\3\16"+
    "\1\154\3\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\5\16\1\155\1\0\1\16\1\156\12\16\1\157\3\16"+
    "\1\160\15\16\1\161\10\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\1\162\1\0\6\16\1\0\47\16"+
    "\1\0\3\16\1\163\3\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\2\16\1\164\3\16\1\0\1\165\46\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\4\16\1\166\42\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\1\167\1\0\6\16\1\0"+
    "\10\16\1\170\36\16\1\0\3\16\1\171\3\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\1\16\1\172\2\16"+
    "\1\173\1\16\1\0\47\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\12\16\1\174"+
    "\6\16\1\175\25\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\6\16\1\176\1\16"+
    "\1\177\36\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\2\16\1\200\3\16\1\0\21\16\1\201"+
    "\25\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\13\16\1\202\33\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\21\16\1\203\25\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\33\16\1\204\13\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\10\16\1\205\36\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\3\16\1\206\2\16"+
    "\1\0\47\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\10\16\1\207\2\16\1\210"+
    "\1\16\1\211\31\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\6\16\1\212\40\16"+
    "\1\0\7\16\1\107\13\0\2\16\66\0\1\52\13\0"+
    "\1\52\100\0\1\53\31\0\1\16\2\0\6\16\1\110"+
    "\4\16\1\213\42\16\1\0\5\16\1\214\1\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\1\215\5\16\1\0"+
    "\15\16\1\216\31\16\1\0\7\16\1\107\13\0\2\16"+
    "\77\217\1\220\1\221\13\217\101\0\1\222\17\0\1\16"+
    "\2\0\6\16\1\0\47\16\1\0\7\16\1\107\13\0"+
    "\1\16\1\223\34\0\1\224\115\0\1\225\10\0\1\226"+
    "\111\0\1\227\54\0\1\230\20\0\1\231\42\0\1\230"+
    "\52\0\1\232\6\0\1\233\100\0\1\234\100\0\1\235"+
    "\167\0\1\100\13\0\1\100\20\0\1\236\63\0\1\236"+
    "\25\0\1\16\2\0\6\16\1\0\35\16\1\237\11\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\1\0"+
    "\1\236\6\16\1\0\47\16\1\0\4\16\1\240\2\16"+
    "\1\107\13\0\2\16\5\0\1\241\2\0\6\241\1\0"+
    "\47\241\2\0\5\241\15\0\2\241\23\0\1\242\75\0"+
    "\1\16\2\0\6\16\1\243\47\16\1\0\5\16\1\244"+
    "\1\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\11\16\1\245\35\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\3\16\1\246\2\16\1\0"+
    "\14\16\1\247\32\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\30\16\1\250\16\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\21\16\1\251\25\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\43\16"+
    "\1\252\3\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\253\143\0\1\254\63\0\1\16\2\0\6\16\1\0"+
    "\2\16\1\255\44\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\1\256\46\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\20\16\1\257\26\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\1\260\46\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\30\16\1\261\16\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\34\16"+
    "\1\262\12\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\7\16\1\120\37\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\263\2\0\6\16"+
    "\1\0\47\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\36\16\1\264\10\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\1\265\16\16\1\266\27\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\1\267"+
    "\46\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\4\16\1\270\1\16\1\0\47\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\11\16\1\271\35\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\7\16\1\272\37\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\37\16\1\273\7\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\15\16"+
    "\1\274\31\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\1\275\5\16\1\0\47\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\267\2\0\6\16\1\0"+
    "\47\16\1\0\7\16\1\107\13\0\2\16\41\0\1\276"+
    "\57\0\1\16\2\0\6\16\1\0\11\16\1\277\35\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\27\16\1\300\17\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\22\16"+
    "\1\301\24\16\1\0\7\16\1\107\13\0\2\16\16\0"+
    "\1\302\55\0\1\302\24\0\1\16\2\0\6\16\1\303"+
    "\47\16\1\0\5\16\1\304\1\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\302\47\16\1\0\5\16"+
    "\1\305\1\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\21\16\1\306\25\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\2\16"+
    "\1\307\44\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\12\16\1\310\34\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\1\311\46\16\1\0\7\16\1\107\13\0\2\16"+
    "\46\0\1\312\52\0\1\16\2\0\6\16\1\0\27\16"+
    "\1\313\17\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\47\16\1\0\1\16\1\314"+
    "\5\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\5\16\1\315\41\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\1\316\1\0\6\16\1\0\47\16"+
    "\1\0\3\16\1\317\3\16\1\107\13\0\2\16\23\0"+
    "\1\254\75\0\1\16\2\0\6\16\1\0\25\16\1\300"+
    "\21\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\4\16\1\300\42\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\2\16\1\320"+
    "\3\16\1\0\47\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\31\16\1\321\15\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\5\16\1\322\1\0\47\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\23\16\1\323"+
    "\23\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\15\16\1\324\31\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\325"+
    "\47\16\1\0\5\16\1\326\1\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\5\16\1\327\1\0\14\16\1\330"+
    "\17\16\1\331\12\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\23\16\1\332\23\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\6\16\1\333\40\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\36\16"+
    "\1\334\10\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\1\335\5\16\1\0\47\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\26\16\1\336\20\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\1\337\46\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\340\2\0\6\16"+
    "\1\0\47\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\6\16\1\341\40\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\342\2\0\6\16"+
    "\1\0\47\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\1\343\1\0\6\16\1\0\47\16\1\0\3\16"+
    "\1\344\3\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\4\16\1\345\42\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\346\2\0\6\16\1\0\47\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\16\16\1\300\30\16\1\0\7\16\1\107"+
    "\13\0\2\16\77\217\1\347\1\221\13\217\102\222\1\0"+
    "\11\222\35\0\1\350\115\0\1\351\73\0\1\352\142\0"+
    "\1\350\70\0\1\350\134\0\1\350\64\0\1\353\140\0"+
    "\1\354\105\0\1\355\112\0\1\356\70\0\1\357\110\0"+
    "\1\16\2\0\6\16\1\0\7\16\1\360\37\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\1\361"+
    "\5\16\1\0\47\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\241\2\0\6\241\1\0\47\241\1\0\6\241"+
    "\1\0\1\107\13\0\2\241\10\0\1\362\113\0\1\363"+
    "\110\0\1\16\2\0\1\364\5\16\1\0\47\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\2\16"+
    "\1\365\3\16\1\0\47\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\5\16\1\366\1\0\47\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\5\16\1\367\41\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\5\16"+
    "\1\370\41\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\1\371\46\16\1\0\7\16"+
    "\1\107\13\0\2\16\10\0\1\372\171\0\1\254\13\0"+
    "\1\254\2\0\1\373\13\0\1\16\2\0\6\16\1\0"+
    "\3\16\1\214\43\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\3\16\1\374\2\16\1\0\47\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\20\16\1\375\26\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\3\16\1\376\2\16"+
    "\1\0\47\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\17\16\1\377\27\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\3\16"+
    "\1\u0100\2\16\1\0\47\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\u0101\2\0\6\16\1\0\47\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\30\16\1\301\16\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\45\16\1\u0102"+
    "\1\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\2\16\1\u0103\44\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\2\16\1\u0104"+
    "\3\16\1\0\30\16\1\u0105\16\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\1\u0106\5\16\1\0"+
    "\47\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\1\u0107\5\16\1\0\47\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\1\u0108\5\16\1\0"+
    "\47\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\4\16\1\u0109\42\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\47\16\1\254\7\16\1\107\3\0\1\254\2\0\1\373"+
    "\4\0\2\16\26\0\1\u010a\126\0\1\u010b\57\0\1\16"+
    "\2\0\6\16\1\0\22\16\1\u010c\24\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\7\16\1\u010d\37\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\24\16\1\u010e\22\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\12\16\1\u010f\34\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\41\16"+
    "\1\u0110\5\16\1\0\7\16\1\107\13\0\2\16\52\0"+
    "\1\u0111\46\0\1\16\2\0\6\16\1\0\33\16\1\u0112"+
    "\13\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\3\16\1\u0108\43\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\2\16\1\u0113"+
    "\3\16\1\0\47\16\1\0\7\16\1\107\13\0\2\16"+
    "\25\0\1\u0114\73\0\1\16\2\0\6\16\1\0\6\16"+
    "\1\u0115\40\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\30\16\1\u0116\16\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\5\16\1\u010c\41\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\12\16\1\u0117"+
    "\34\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\16\1\322\45\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\4\16\1\u0118\42\16\1\0\7\16\1\107\13\0\2\16"+
    "\10\0\1\u0119\110\0\1\16\2\0\1\u011a\5\16\1\0"+
    "\47\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\u011b\46\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\12\16"+
    "\1\u011c\34\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\3\16\1\u011d\2\16\1\0\47\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\15\16\1\u011e\31\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\14\16\1\u011f"+
    "\32\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\4\16\1\u0120\6\16\1\u0121\33\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\1\u0122"+
    "\1\0\6\16\1\0\47\16\1\0\3\16\1\u0123\3\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\u0124"+
    "\47\16\1\0\5\16\1\274\1\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\16\16\1\161\30\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\u0125\2\0"+
    "\6\16\1\0\47\16\1\0\7\16\1\107\13\0\2\16"+
    "\23\0\1\u0126\75\0\1\16\2\0\6\16\1\0\4\16"+
    "\1\u0127\42\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\1\u0128\5\16\1\0\47\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\1\u0129\5\16"+
    "\1\0\47\16\1\0\7\16\1\107\13\0\2\16\37\0"+
    "\1\u012a\67\0\1\u012b\131\0\1\u012c\102\0\1\353\116\0"+
    "\1\u012d\121\0\1\u012e\114\0\1\u012f\66\0\1\16\2\0"+
    "\4\16\1\u0130\1\16\1\0\47\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\2\16\1\u0131\3\16"+
    "\1\0\47\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\31\16\1\u0132\15\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\2\16"+
    "\1\u0133\3\16\1\0\47\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\3\16\1\u0134\2\16\1\0"+
    "\47\16\1\0\7\16\1\107\13\0\2\16\41\0\1\u0135"+
    "\57\0\1\16\2\0\6\16\1\0\12\16\1\u0136\34\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\21\16\1\300\25\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\5\16\1\u0137\1\0"+
    "\47\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\1\16\1\u0138\4\16\1\0\47\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\21\16\1\u0109\25\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\5\16\1\u0139\1\0\47\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\30\16\1\u013a\16\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\30\16\1\u011a"+
    "\16\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\21\16\1\u013b\25\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\13\16\1\u013c\33\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\13\16\1\u013d\33\16"+
    "\1\0\7\16\1\107\13\0\2\16\6\0\1\u013e\63\0"+
    "\1\u013e\26\0\1\16\1\u013e\1\0\6\16\1\0\47\16"+
    "\1\0\3\16\1\u013f\3\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\1\364\46\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\5\16\1\u0140"+
    "\1\0\47\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\42\16\1\u0141\4\16\1\0"+
    "\7\16\1\107\13\0\2\16\26\0\1\u0142\72\0\1\16"+
    "\2\0\6\16\1\0\7\16\1\u0143\37\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\1\360\46\16\1\0\7\16\1\107\13\0\2\16\23\0"+
    "\1\u0144\75\0\1\16\2\0\6\16\1\0\4\16\1\u0145"+
    "\42\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\40\16\1\u0146\6\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\20\16\1\u0147\26\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\7\16\1\300\37\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\46\16\1\245\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\24\16\1\u0148"+
    "\22\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\21\16\1\u0120\25\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\37\16\1\u0149\7\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\12\16\1\u014a\34\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\1\337\5\16\1\0\47\16\1\0\7\16\1\107\13\0"+
    "\2\16\23\0\1\u014b\75\0\1\16\2\0\6\16\1\0"+
    "\4\16\1\u014c\42\16\1\0\7\16\1\107\13\0\2\16"+
    "\10\0\1\u014d\110\0\1\16\2\0\6\16\1\0\13\16"+
    "\1\u014e\33\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\22\16\1\u014f\24\16\1\0"+
    "\7\16\1\107\13\0\2\16\40\0\1\350\70\0\1\u0150"+
    "\135\0\1\u0151\102\0\1\350\130\0\1\u0152\55\0\1\16"+
    "\2\0\5\16\1\u0153\1\0\47\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\1\u0125"+
    "\46\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\273\46\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\1\u0143"+
    "\46\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\12\16\1\u0154\34\16\1\0\7\16"+
    "\1\107\13\0\2\16\26\0\1\u0155\72\0\1\16\2\0"+
    "\5\16\1\u0156\1\0\47\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\1\u0157\46\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\1\16\1\u0158\4\16\1\0\47\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\1\u0159"+
    "\46\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\u015a\46\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\2\16"+
    "\1\u015b\44\16\1\0\7\16\1\107\13\0\2\16\23\0"+
    "\1\u015c\75\0\1\16\2\0\6\16\1\0\4\16\1\u015d"+
    "\42\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\21\16\1\u0108\25\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\12\16\1\u015e\34\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\3\16\1\u015f\2\16\1\0\47\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\17\16\1\u0160\27\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\1\u0161"+
    "\46\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\24\16\1\u0162\22\16\1\0\7\16"+
    "\1\107\13\0\2\16\46\0\1\u0163\52\0\1\16\2\0"+
    "\6\16\1\0\27\16\1\u0164\17\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\7\16"+
    "\1\u0165\37\16\1\0\7\16\1\107\13\0\2\16\17\0"+
    "\1\u0166\132\0\1\u0167\74\0\1\u0168\101\0\1\16\2\0"+
    "\2\16\1\361\3\16\1\0\47\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\5\16\1\u0169\1\0"+
    "\47\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\u016a\46\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\1\300"+
    "\46\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\12\16\1\u016b\34\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\1\u013d\46\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\5\16\1\u016c\1\0\47\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\3\16\1\u0165\43\16\1\0\7\16\1\107\13\0\2\16"+
    "\41\0\1\u016d\57\0\1\16\2\0\6\16\1\0\22\16"+
    "\1\u016e\24\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\1\u0164\46\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\2\16\1\u016f"+
    "\3\16\1\0\47\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\6\16\1\0\20\16\1\300\26\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\1\16\1\u0170\45\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\5\16\1\u0171\1\0"+
    "\47\16\1\0\7\16\1\107\13\0\2\16\17\0\1\350"+
    "\133\0\1\350\74\0\1\u0172\100\0\1\16\2\0\6\16"+
    "\1\0\12\16\1\u0173\34\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\5\16\1\u0174\1\0\47\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\30\16\1\u0175\16\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\5\16\1\u0176\1\0"+
    "\47\16\1\0\7\16\1\107\13\0\2\16\26\0\1\u0177"+
    "\72\0\1\16\2\0\6\16\1\0\7\16\1\u0178\37\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\24\16\1\u0179\22\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\2\16"+
    "\1\u017a\44\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\31\16\1\u017b\15\16\1\0"+
    "\7\16\1\107\13\0\2\16\21\0\1\u017c\77\0\1\16"+
    "\2\0\6\16\1\0\2\16\1\u017d\44\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\12\16\1\u017e\34\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\2\16\1\u017f\3\16\1\0\47\16"+
    "\1\0\7\16\1\107\13\0\2\16\5\0\1\16\2\0"+
    "\6\16\1\0\1\u0180\46\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\12\16\1\u0181"+
    "\34\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\5\16\1\u0182\41\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\1\u0178\46\16\1\0\7\16\1\107\13\0\2\16\24\0"+
    "\1\u0183\74\0\1\16\2\0\6\16\1\0\3\16\1\u0145"+
    "\43\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\1\u0127\46\16\1\0\7\16\1\107"+
    "\13\0\2\16\5\0\1\16\2\0\6\16\1\0\5\16"+
    "\1\u0184\41\16\1\0\7\16\1\107\13\0\2\16\5\0"+
    "\1\16\2\0\6\16\1\0\1\u014e\46\16\1\0\7\16"+
    "\1\107\13\0\2\16\5\0\1\16\2\0\6\16\1\0"+
    "\2\16\1\u0185\44\16\1\0\7\16\1\107\13\0\2\16"+
    "\5\0\1\16\2\0\2\16\1\300\3\16\1\0\47\16"+
    "\1\0\7\16\1\107\13\0\2\16\12\0\1\350\106\0"+
    "\1\16\2\0\6\16\1\0\21\16\1\u0186\25\16\1\0"+
    "\7\16\1\107\13\0\2\16\5\0\1\16\2\0\6\16"+
    "\1\0\3\16\1\u013c\43\16\1\0\7\16\1\107\13\0"+
    "\2\16\5\0\1\16\2\0\6\16\1\0\2\16\1\u0187"+
    "\44\16\1\0\7\16\1\107\13\0\2\16\5\0\1\16"+
    "\2\0\6\16\1\0\3\16\1\u0149\43\16\1\0\7\16"+
    "\1\107\13\0\2\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24852];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\45\1\1\11\2\1\7\11"+
    "\1\1\7\0\1\1\3\11\1\0\2\1\1\0\1\11"+
    "\10\1\2\0\27\1\1\0\7\1\1\0\4\1\1\0"+
    "\27\1\1\0\1\11\1\0\2\1\13\0\3\1\2\0"+
    "\7\1\2\0\21\1\1\11\3\1\2\0\6\1\1\0"+
    "\3\1\1\0\6\1\1\0\15\1\1\0\4\1\1\11"+
    "\6\0\1\11\2\1\1\0\1\11\6\1\1\0\1\11"+
    "\16\1\1\0\1\11\5\1\1\0\2\1\1\0\4\1"+
    "\1\11\10\1\1\0\1\1\1\0\1\1\1\11\3\1"+
    "\5\0\1\11\5\1\1\0\10\1\1\0\3\1\1\11"+
    "\1\1\1\11\6\1\1\0\1\1\1\11\2\1\3\0"+
    "\2\1\1\11\6\1\1\0\6\1\1\11\2\1\3\0"+
    "\4\1\1\0\4\1\1\0\4\1\1\11\4\1\1\0"+
    "\6\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  public _QueryGrammarLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QueryGrammarLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 58: break;
          case 2: 
            { return OP_LT;
            }
          case 59: break;
          case 3: 
            { return OP_GT;
            }
          case 60: break;
          case 4: 
            { return OP_EQ;
            }
          case 61: break;
          case 5: 
            { return ID_TOKEN;
            }
          case 62: break;
          case 6: 
            { return OP_IN;
            }
          case 63: break;
          case 7: 
            { return OP_AND;
            }
          case 64: break;
          case 8: 
            { return WHITE_SPACE;
            }
          case 65: break;
          case 9: 
            { return NUMBER;
            }
          case 66: break;
          case 10: 
            { return DOT;
            }
          case 67: break;
          case 11: 
            { return OP_DIV;
            }
          case 68: break;
          case 12: 
            { return ASTERISK;
            }
          case 69: break;
          case 13: 
            { return COMMA;
            }
          case 70: break;
          case 14: 
            { return LPAREN;
            }
          case 71: break;
          case 15: 
            { return RPAREN;
            }
          case 72: break;
          case 16: 
            { return SEMICOLON;
            }
          case 73: break;
          case 17: 
            { return OP_PLUS;
            }
          case 74: break;
          case 18: 
            { return OP_MINUS;
            }
          case 75: break;
          case 19: 
            { return OP_NEQ;
            }
          case 76: break;
          case 20: 
            { return OP_LTE;
            }
          case 77: break;
          case 21: 
            { return OP_GTE;
            }
          case 78: break;
          case 22: 
            { return OP_IS;
            }
          case 79: break;
          case 23: 
            { return ПОKEYWORD;
            }
          case 80: break;
          case 24: 
            { return OP_NOT;
            }
          case 81: break;
          case 25: 
            { return ONKEYWORD;
            }
          case 82: break;
          case 26: 
            { return OP_OR;
            }
          case 83: break;
          case 27: 
            { return ASKEYWORD;
            }
          case 84: break;
          case 28: 
            { return FROMKEYWORD;
            }
          case 85: break;
          case 29: 
            { return STRING;
            }
          case 86: break;
          case 30: 
            { return LINE_COMMENT;
            }
          case 87: break;
          case 31: 
            { return BYKEYWORD;
            }
          case 88: break;
          case 32: 
            { return ENDKEYWORD;
            }
          case 89: break;
          case 33: 
            { return ALLKEYWORD;
            }
          case 90: break;
          case 34: 
            { return TOPKEYWORD;
            }
          case 91: break;
          case 35: 
            { return ASCKEYWORD;
            }
          case 92: break;
          case 36: 
            { return WHEREKEYWORD;
            }
          case 93: break;
          case 37: 
            { return OP_LIKE;
            }
          case 94: break;
          case 38: 
            { return LEFTKEYWORD;
            }
          case 95: break;
          case 39: 
            { return ELSEKEYWORD;
            }
          case 96: break;
          case 40: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 1;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return AGGREGATIONFUNCTION;
            }
          case 97: break;
          case 41: 
            { return NULL;
            }
          case 98: break;
          case 42: 
            { return BOOL;
            }
          case 99: break;
          case 43: 
            { return THENKEYWORD;
            }
          case 100: break;
          case 44: 
            { return DESCKEYWORD;
            }
          case 101: break;
          case 45: 
            { return CASEKEYWORD;
            }
          case 102: break;
          case 46: 
            { return WHENKEYWORD;
            }
          case 103: break;
          case 47: 
            { return FULLKEYWORD;
            }
          case 104: break;
          case 48: 
            { return JOINKEYWORD;
            }
          case 105: break;
          case 49: 
            { return INNERKEYWORD;
            }
          case 106: break;
          case 50: 
            { return ORDERKEYWORD;
            }
          case 107: break;
          case 51: 
            { return OUTERKEYWORD;
            }
          case 108: break;
          case 52: 
            { return RIGHTKEYWORD;
            }
          case 109: break;
          case 53: 
            { return UNIONKEYWORD;
            }
          case 110: break;
          case 54: 
            { return GROUPKEYWORD;
            }
          case 111: break;
          case 55: 
            { return SELECTKEYWORD;
            }
          case 112: break;
          case 56: 
            { return HAVINGKEYWORD;
            }
          case 113: break;
          case 57: 
            { return DISTINCTKEYWORD;
            }
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
