/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package generated;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static generated.GeneratedTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_QueryGrammarLexer.flex</tt>
 */
public class _QueryGrammarLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 7, 6]
   * Total runtime size is 2576 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>13]<<7)|((ch>>6)&0x7f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\206\2");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\12\3\1\6\1\7\110\3\1\10\45\3\1\11\1\12\2\3\1\13\73"+
    "\3\1\10\277\3");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\64\4\75\22\0\1\64\1\3\1\76\2\0\1\106\1\0\1\73\1\103\1\104\1\100\1"+
    "\107\1\102\1\110\1\101\1\77\12\65\1\0\1\105\1\1\1\4\1\2\2\0\1\22\1\111\1\30"+
    "\1\23\1\10\1\42\1\50\1\40\1\70\1\62\1\71\1\5\1\43\1\16\1\17\1\45\1\67\1\25"+
    "\1\72\1\20\1\51\1\55\1\37\1\67\1\112\1\67\1\0\1\74\4\0\1\22\1\111\1\30\1\23"+
    "\1\10\1\42\1\50\1\40\1\70\1\62\1\71\1\5\1\43\1\16\1\17\1\45\1\67\1\25\1\72"+
    "\1\20\1\51\1\55\1\37\1\67\1\112\1\67\12\0\1\75\32\0\1\64\217\0\2\6\115\0\1"+
    "\27\20\0\1\34\1\14\1\31\1\41\1\13\1\21\1\66\1\44\1\24\1\67\1\47\1\26\1\56"+
    "\1\15\1\12\1\11\1\33\1\52\1\35\1\53\3\67\1\46\1\63\1\60\1\61\1\32\1\36\1\67"+
    "\1\57\1\54\1\34\1\14\1\31\1\41\1\13\1\21\1\66\1\44\1\24\1\67\1\47\1\26\1\56"+
    "\1\15\1\12\1\11\1\33\1\52\1\35\1\53\3\67\1\46\1\63\1\60\1\61\1\32\1\36\1\67"+
    "\1\57\1\54\60\0\1\64\77\0\13\64\35\0\2\75\5\0\1\64\57\0\1\64\112\0\1\7\25"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\11\5\1\6\2\5\1\1\14\5\1\7\1\10\2\5"+
    "\2\1\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\5\1\23\1\24\1\25\1\0"+
    "\2\5\1\0\1\26\3\5\1\27\1\5\1\30\1\31"+
    "\5\5\2\32\1\0\3\5\1\33\2\5\1\0\3\5"+
    "\1\0\25\5\1\0\1\34\3\0\1\35\1\36\1\0"+
    "\2\5\1\0\7\5\1\37\1\5\1\40\1\6\2\41"+
    "\2\0\2\5\1\31\2\5\1\0\3\5\1\0\7\5"+
    "\1\42\3\5\1\32\1\5\1\0\5\5\1\0\3\5"+
    "\1\34\1\43\1\44\1\43\1\0\7\5\1\45\1\0"+
    "\2\46\3\5\1\0\2\5\1\0\5\5\1\0\1\5"+
    "\1\0\1\47\1\5\1\0\4\5\2\50\2\5\1\51"+
    "\5\5\1\52\1\53\1\0\3\5\2\54\1\0\4\5"+
    "\1\0\1\5\1\45\1\55\2\56\3\5\1\51\3\5"+
    "\1\0\2\5\1\57\4\5\2\60\3\5\1\57\1\5"+
    "\1\0\7\5\2\61\16\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\113\0\u0177\0\u01c2"+
    "\0\u020d\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a"+
    "\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672"+
    "\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca"+
    "\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22"+
    "\0\113\0\113\0\113\0\113\0\113\0\113\0\113\0\113"+
    "\0\113\0\u0b6d\0\113\0\113\0\113\0\u0bb8\0\u0c03\0\u0c4e"+
    "\0\u0c99\0\u0ce4\0\u0d2f\0\u0d7a\0\u0dc5\0\u020d\0\u0e10\0\u020d"+
    "\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2\0\u101d\0\u1068"+
    "\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u020d\0\u11df\0\u122a\0\u1275"+
    "\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482\0\u14cd"+
    "\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725"+
    "\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u1932\0\u197d"+
    "\0\u19c8\0\u0a8c\0\113\0\u1a13\0\u0ad7\0\u1a5e\0\u1aa9\0\u020d"+
    "\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01"+
    "\0\u1d4c\0\u1d97\0\u1de2\0\u020d\0\u1e2d\0\u020d\0\u020d\0\113"+
    "\0\u020d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u020d\0\u1fa4\0\u1fef"+
    "\0\u203a\0\u2085\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u2247"+
    "\0\u2292\0\u22dd\0\u2328\0\u2373\0\u020d\0\u23be\0\u2409\0\u2454"+
    "\0\u020d\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661"+
    "\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u0ad7\0\113\0\u020d\0\u020d"+
    "\0\u27d8\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a\0\u29e5"+
    "\0\u020d\0\u2a30\0\113\0\u020d\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c"+
    "\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69\0\u2db4"+
    "\0\u2dff\0\u2e4a\0\u2e95\0\u020d\0\u2ee0\0\u2f2b\0\u2f76\0\u2fc1"+
    "\0\u300c\0\u3057\0\113\0\u020d\0\u30a2\0\u30ed\0\113\0\u3138"+
    "\0\u3183\0\u31ce\0\u3219\0\u3264\0\u020d\0\u020d\0\u32af\0\u32fa"+
    "\0\u3345\0\u3390\0\113\0\u020d\0\u33db\0\u3426\0\u3471\0\u34bc"+
    "\0\u3507\0\u3552\0\u359d\0\113\0\u020d\0\113\0\u020d\0\u35e8"+
    "\0\u3633\0\u367e\0\u020d\0\u36c9\0\u3714\0\u375f\0\u37aa\0\u37f5"+
    "\0\u3840\0\113\0\u388b\0\u38d6\0\u3921\0\u396c\0\113\0\u020d"+
    "\0\u39b7\0\u3a02\0\u3a4d\0\u020d\0\u3a98\0\u3ae3\0\u3b2e\0\u3b79"+
    "\0\u3bc4\0\u3c0f\0\u3c5a\0\u3ca5\0\u3cf0\0\113\0\u020d\0\u3d3b"+
    "\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2\0\u3efd\0\u3f48\0\u3f93"+
    "\0\u3fde\0\u4029\0\u4074\0\u40bf\0\u410a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\2\11\1\14\1\15\1\16\1\17"+
    "\1\11\1\20\1\21\1\22\1\23\1\24\1\25\1\11"+
    "\1\26\1\11\1\27\3\11\1\30\1\31\1\32\1\33"+
    "\4\11\1\34\1\35\1\36\1\37\1\40\6\11\1\41"+
    "\1\11\1\42\1\43\2\11\1\44\1\11\1\45\1\46"+
    "\1\2\1\42\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\11\115\0"+
    "\1\63\1\0\1\64\112\0\1\65\112\0\1\63\113\0"+
    "\1\11\1\66\1\0\1\67\16\11\1\0\34\11\1\0"+
    "\3\11\1\70\2\11\16\0\2\11\16\0\1\71\101\0"+
    "\1\11\2\0\17\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\2\11\1\72\6\11\1\73"+
    "\5\11\1\0\3\11\1\74\30\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\4\11\1\75\12\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\11\11\1\76\5\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\7\11\1\77\7\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\6\11\1\100\6\11\1\101\1\11\1\0\21\11\1\102"+
    "\12\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\7\11\1\103\5\11\1\104\1\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\105\2\0\6\11\1\106"+
    "\10\11\1\107\34\11\1\0\5\11\1\110\16\0\2\11"+
    "\5\0\1\11\1\111\1\0\1\112\16\11\1\0\34\11"+
    "\1\0\3\11\1\113\2\11\16\0\2\11\5\0\1\11"+
    "\2\0\16\11\1\114\1\0\14\11\1\115\5\11\1\116"+
    "\3\11\1\117\5\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\1\120\1\0\17\11\1\0\34\11\1\0\3\11"+
    "\1\121\2\11\16\0\2\11\5\0\1\11\2\0\2\11"+
    "\1\122\6\11\1\123\5\11\1\0\34\11\1\0\6\11"+
    "\16\0\2\11\10\0\1\124\107\0\1\11\2\0\2\11"+
    "\1\125\2\11\1\126\11\11\1\0\2\11\1\127\17\11"+
    "\1\130\11\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\17\11\1\0\4\11\1\131\27\11\1\0\6\11"+
    "\16\0\2\11\5\0\1\11\2\0\17\11\1\0\10\11"+
    "\1\132\23\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\12\11\1\133\4\11\1\0\34\11\1\0\6\11"+
    "\16\0\2\11\5\0\1\11\2\0\3\11\1\134\13\11"+
    "\1\0\34\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\12\11\1\135\2\11\1\136\1\11\1\0\21\11"+
    "\1\137\12\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\17\11\1\0\4\11\1\140\27\11\1\0\6\11"+
    "\16\0\2\11\5\0\1\11\2\0\15\11\1\141\1\11"+
    "\1\0\34\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\6\11\1\142\10\11\1\0\34\11\1\0\6\11"+
    "\16\0\2\11\5\0\1\11\2\0\2\11\1\143\14\11"+
    "\1\0\11\11\1\144\22\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\1\11\1\145\2\11\1\146\12\11"+
    "\1\0\34\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\7\11\1\147\7\11\1\0\34\11\1\0\6\11"+
    "\16\0\2\11\64\0\1\42\10\0\1\42\102\0\1\43"+
    "\32\0\1\11\2\0\6\11\1\150\10\11\1\0\34\11"+
    "\1\0\6\11\16\0\2\11\5\0\1\11\2\0\1\151"+
    "\16\11\1\0\34\11\1\0\6\11\16\0\2\11\73\152"+
    "\1\153\1\154\16\152\74\155\1\156\1\155\1\153\14\155"+
    "\77\0\1\157\20\0\1\11\2\0\17\11\1\0\34\11"+
    "\1\0\6\11\16\0\1\11\1\160\7\0\1\161\61\0"+
    "\1\161\26\0\1\11\2\0\17\11\1\0\12\11\1\162"+
    "\21\11\1\0\6\11\16\0\2\11\5\0\1\11\1\0"+
    "\1\161\17\11\1\0\34\11\1\0\4\11\1\163\1\11"+
    "\16\0\2\11\16\0\1\164\101\0\1\11\2\0\3\11"+
    "\1\165\12\11\1\166\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\17\11\1\0\3\11\1\167"+
    "\30\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\17\11\1\0\4\11\1\170\27\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\17\11\1\0\31\11\1\171"+
    "\2\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\10\11\1\76\6\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\13\11\1\172\3\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\10\11\1\173\6\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\17\11\1\0\15\11\1\174"+
    "\16\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\17\11\1\0\21\11\1\175\12\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\176\2\0\17\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\13\11\1\177"+
    "\3\11\1\0\34\11\1\0\6\11\16\0\2\11\30\0"+
    "\1\200\67\0\1\11\2\0\17\11\1\0\1\201\33\11"+
    "\1\0\6\11\16\0\2\11\27\0\1\202\42\0\1\202"+
    "\25\0\1\11\2\0\17\11\1\203\34\11\1\0\5\11"+
    "\1\204\16\0\2\11\5\0\1\11\2\0\17\11\1\202"+
    "\34\11\1\0\5\11\1\205\16\0\2\11\5\0\1\11"+
    "\2\0\14\11\1\206\2\11\1\0\34\11\1\0\6\11"+
    "\16\0\2\11\5\0\1\11\2\0\17\11\1\0\5\11"+
    "\1\207\26\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\11\11\1\210\5\11\1\0\34\11\1\0\6\11"+
    "\16\0\2\11\50\0\1\211\47\0\1\11\2\0\17\11"+
    "\1\0\20\11\1\212\13\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\17\11\1\0\34\11\1\0\1\11"+
    "\1\213\4\11\16\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\1\11\1\214\32\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\215\112\0\1\11\2\0\17\11\1\0\14\11"+
    "\1\216\17\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\11\11\1\217\5\11\1\0\23\11\1\220\10\11"+
    "\1\0\6\11\16\0\2\11\5\0\1\11\2\0\4\11"+
    "\1\221\12\11\1\0\34\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\11\11\1\176\5\11\1\0\34\11"+
    "\1\0\6\11\16\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\14\11\1\222\17\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\1\223\16\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\25\11\1\224\6\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\11\11\1\225\5\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\226\2\0\17\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\7\11\1\227\7\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\230\2\0\17\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\17\11\1\231\14\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\7\11\1\232\7\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\1\233\1\0\17\11"+
    "\1\0\34\11\1\0\3\11\1\234\2\11\16\0\2\11"+
    "\5\0\1\11\2\0\11\11\1\235\5\11\1\0\34\11"+
    "\1\0\6\11\16\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\3\11\1\236\30\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\2\11\1\237\14\11\1\0\34\11"+
    "\1\0\6\11\16\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\2\11\1\240\31\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\1\241\1\0\17\11\1\0\34\11\1\0"+
    "\3\11\1\242\2\11\16\0\2\11\5\0\1\11\2\0"+
    "\6\11\1\243\10\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\244\2\0\17\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\75\152\1\0\15\152\74\155\1\156"+
    "\1\155\1\245\14\155\75\157\1\0\15\157\10\0\1\246"+
    "\107\0\1\11\2\0\10\11\1\247\6\11\1\0\34\11"+
    "\1\0\6\11\16\0\2\11\5\0\1\11\2\0\1\250"+
    "\16\11\1\0\34\11\1\0\6\11\16\0\2\11\10\0"+
    "\1\251\107\0\1\11\2\0\2\11\1\252\14\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\5\11\1\253\11\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\17\11\1\0\1\11\1\254"+
    "\32\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\17\11\1\0\1\11\1\255\32\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\11\11\1\256\5\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\1\257\16\11\1\0\34\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\1\260\16\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\1\261\16\11"+
    "\1\0\34\11\1\0\6\11\16\0\2\11\20\0\1\262"+
    "\122\0\1\263\67\0\1\11\2\0\17\11\1\0\1\264"+
    "\33\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\10\11\1\265\6\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\14\11\1\266\2\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\17\11\1\0\27\11\1\267\4\11\1\0\6\11\16\0"+
    "\2\11\40\0\1\270\57\0\1\11\2\0\17\11\1\0"+
    "\10\11\1\271\23\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\6\11\1\261\25\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\2\11\1\272"+
    "\14\11\1\0\34\11\1\0\6\11\16\0\2\11\10\0"+
    "\1\273\107\0\1\11\2\0\17\11\1\0\3\11\1\201"+
    "\30\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\17\11\1\0\33\11\1\274\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\17\11\1\0\5\11\1\275\26\11"+
    "\1\0\6\11\16\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\0\3\11\1\276\30\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\16\11\1\277\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\15\11\1\300"+
    "\1\11\1\0\34\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\1\301\1\0\17\11\1\0\34\11\1\0\3\11"+
    "\1\302\2\11\16\0\2\11\5\0\1\11\2\0\17\11"+
    "\1\303\34\11\1\0\5\11\1\175\16\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\13\11\1\115\20\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\304\2\0\17\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\17\11\1\0\21\11\1\305\12\11\1\0\6\11\16\0"+
    "\2\11\17\0\1\306\100\0\1\11\2\0\7\11\1\307"+
    "\7\11\1\0\34\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\3\11\1\310\13\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\23\11\1\311\10\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\3\11\1\312\30\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\1\11\1\264\32\11\1\0\6\11\16\0\2\11\16\0"+
    "\1\313\101\0\1\11\2\0\6\11\1\314\10\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\1\315\16\11\1\0\34\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\1\316\16\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\25\0\1\317\72\0\1\11\2\0"+
    "\4\11\1\320\12\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\2\11\1\321\14\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\17\11\1\0\2\11\1\322\31\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\2\11\1\323\14\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\3\11\1\324\13\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\15\11\1\325\1\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\15\11\1\326\1\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\6\0\1\327\61\0\1\327\27\0\1\11\1\327"+
    "\1\0\17\11\1\0\34\11\1\0\3\11\1\330\2\11"+
    "\16\0\2\11\5\0\1\11\2\0\5\11\1\331\11\11"+
    "\1\0\34\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\17\11\1\0\30\11\1\332\3\11\1\0\6\11"+
    "\16\0\2\11\20\0\1\333\77\0\1\11\2\0\10\11"+
    "\1\334\6\11\1\0\34\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\11\11\1\247\5\11\1\0\34\11"+
    "\1\0\6\11\16\0\2\11\30\0\1\335\67\0\1\11"+
    "\2\0\5\11\1\336\11\11\1\0\34\11\1\0\6\11"+
    "\16\0\2\11\5\0\1\11\2\0\17\11\1\0\3\11"+
    "\1\337\30\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\17\11\1\0\4\11\1\340\27\11\1\0\6\11"+
    "\16\0\2\11\5\0\1\11\2\0\14\11\1\341\2\11"+
    "\1\0\34\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\1\225\16\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\16\0\1\342\101\0\1\11\2\0\6\11\1\343"+
    "\10\11\1\0\34\11\1\0\6\11\16\0\2\11\10\0"+
    "\1\344\107\0\1\11\2\0\17\11\1\0\15\11\1\345"+
    "\16\11\1\0\6\11\16\0\2\11\16\0\1\346\101\0"+
    "\1\11\2\0\6\11\1\347\10\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\14\11\1\350"+
    "\2\11\1\0\34\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\1\11\1\351\15\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\24\11\1\352\7\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\15\11\1\353\1\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\1\354\33\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\5\11\1\355\11\11\1\0\34\11\1\0\6\11"+
    "\16\0\2\11\5\0\1\11\2\0\11\11\1\304\5\11"+
    "\1\0\34\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\11\11\1\174\5\11\1\0\34\11\1\0\6\11"+
    "\16\0\2\11\5\0\1\11\2\0\11\11\1\334\5\11"+
    "\1\0\34\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\14\11\1\356\2\11\1\0\34\11\1\0\6\11"+
    "\16\0\2\11\16\0\1\357\101\0\1\11\2\0\6\11"+
    "\1\360\10\11\1\0\34\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\17\11\1\0\4\11\1\261\27\11"+
    "\1\0\6\11\16\0\2\11\5\0\1\11\2\0\14\11"+
    "\1\361\2\11\1\0\34\11\1\0\6\11\16\0\2\11"+
    "\20\0\1\362\77\0\1\11\2\0\11\11\1\363\5\11"+
    "\1\0\34\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\11\11\1\364\5\11\1\0\34\11\1\0\6\11"+
    "\16\0\2\11\5\0\1\11\2\0\17\11\1\0\5\11"+
    "\1\365\26\11\1\0\6\11\16\0\2\11\5\0\1\11"+
    "\2\0\17\11\1\0\16\11\1\366\15\11\1\0\6\11"+
    "\16\0\2\11\50\0\1\367\47\0\1\11\2\0\17\11"+
    "\1\0\20\11\1\370\13\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\5\11\1\371\11\11\1\0\34\11"+
    "\1\0\6\11\16\0\2\11\5\0\1\11\2\0\1\11"+
    "\1\372\15\11\1\0\34\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\3\11\1\373\13\11\1\0\34\11"+
    "\1\0\6\11\16\0\2\11\5\0\1\11\2\0\10\11"+
    "\1\374\6\11\1\0\34\11\1\0\6\11\16\0\2\11"+
    "\5\0\1\11\2\0\2\11\1\250\14\11\1\0\34\11"+
    "\1\0\6\11\16\0\2\11\5\0\1\11\2\0\5\11"+
    "\1\375\11\11\1\0\34\11\1\0\6\11\16\0\2\11"+
    "\30\0\1\376\67\0\1\11\2\0\17\11\1\0\1\377"+
    "\33\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\11\11\1\370\5\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\11\11\1\326\5\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\5\11\1\u0100\11\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\17\11\1\0\6\11\1\374"+
    "\25\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\5\11\1\u0101\11\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\11\11\1\u0102\5\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\14\11\1\u0103\2\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\5\0\1\11\2\0\2\11\1\u0104\14\11\1\0"+
    "\34\11\1\0\6\11\16\0\2\11\5\0\1\11\2\0"+
    "\14\11\1\u0105\2\11\1\0\34\11\1\0\6\11\16\0"+
    "\2\11\20\0\1\u0106\77\0\1\11\2\0\10\11\1\u0107"+
    "\6\11\1\0\34\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\5\11\1\u0108\11\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\2\11\1\u0109\31\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\5\11\1\u010a\11\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\3\11\1\u010b\30\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\16\11\1\u010c\15\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\5\11\1\u010d\26\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\11\11\1\u010e\5\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\11\11\1\u0107"+
    "\5\11\1\0\34\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\14\11\1\u010f\2\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\2\11\1\u0110"+
    "\14\11\1\0\34\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\14\11\1\u0111\2\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\6\11\1\347\25\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\11\11\1\353\5\11\1\0\34\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\11\11\1\314"+
    "\5\11\1\0\34\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\1\11\1\u0112\32\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\5\11\1\u0113\26\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\4\11\1\u0114\27\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\6\11\1\325\25\11\1\0\6\11\16\0\2\11\5\0"+
    "\1\11\2\0\17\11\1\0\5\11\1\u0115\26\11\1\0"+
    "\6\11\16\0\2\11\5\0\1\11\2\0\17\11\1\0"+
    "\6\11\1\345\25\11\1\0\6\11\16\0\2\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16725];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\42\1\11\11\1\1\3\11"+
    "\1\0\2\1\1\0\17\1\1\0\6\1\1\0\3\1"+
    "\1\0\25\1\1\0\1\11\3\0\2\1\1\0\2\1"+
    "\1\0\13\1\1\11\1\1\2\0\5\1\1\0\3\1"+
    "\1\0\15\1\1\0\5\1\1\0\4\1\1\11\2\1"+
    "\1\0\10\1\1\0\1\11\4\1\1\0\2\1\1\0"+
    "\5\1\1\0\1\1\1\0\2\1\1\0\4\1\1\11"+
    "\3\1\1\11\7\1\1\0\3\1\1\11\1\1\1\0"+
    "\4\1\1\0\1\1\1\11\1\1\1\11\10\1\1\0"+
    "\2\1\1\11\4\1\1\11\6\1\1\0\7\1\1\11"+
    "\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _QueryGrammarLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QueryGrammarLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 50: break;
          case 2: 
            { return OP_LT;
            }
          case 51: break;
          case 3: 
            { return OP_GT;
            }
          case 52: break;
          case 4: 
            { return OP_EQ;
            }
          case 53: break;
          case 5: 
            { return IDSIMPLE;
            }
          case 54: break;
          case 6: 
            { return OP_AND;
            }
          case 55: break;
          case 7: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 56: break;
          case 8: 
            { return NUMBER;
            }
          case 57: break;
          case 9: 
            { return OP_DIV;
            }
          case 58: break;
          case 10: 
            { return ASTERISK;
            }
          case 59: break;
          case 11: 
            { return DOT;
            }
          case 60: break;
          case 12: 
            { return COMMA;
            }
          case 61: break;
          case 13: 
            { return LPAREN;
            }
          case 62: break;
          case 14: 
            { return RPAREN;
            }
          case 63: break;
          case 15: 
            { return SEMICOLON;
            }
          case 64: break;
          case 16: 
            { return OP_REM;
            }
          case 65: break;
          case 17: 
            { return OP_PLUS;
            }
          case 66: break;
          case 18: 
            { return OP_MINUS;
            }
          case 67: break;
          case 19: 
            { return OP_NEQ;
            }
          case 68: break;
          case 20: 
            { return OP_LTE;
            }
          case 69: break;
          case 21: 
            { return OP_GTE;
            }
          case 70: break;
          case 22: 
            { return ПОKEYWORD;
            }
          case 71: break;
          case 23: 
            { return OP_NOT;
            }
          case 72: break;
          case 24: 
            { return ONKEYWORD;
            }
          case 73: break;
          case 25: 
            { return OP_OR;
            }
          case 74: break;
          case 26: 
            { return ASKEYWORD;
            }
          case 75: break;
          case 27: 
            { return FROMKEYWORD;
            }
          case 76: break;
          case 28: 
            { return STRING;
            }
          case 77: break;
          case 29: 
            { return LINE_COMMENT;
            }
          case 78: break;
          case 30: 
            { return BYKEYWORD;
            }
          case 79: break;
          case 31: 
            { return TOPKEYWORD;
            }
          case 80: break;
          case 32: 
            { return ALLKEYWORD;
            }
          case 81: break;
          case 33: 
            { return ASCKEYWORD;
            }
          case 82: break;
          case 34: 
            { return WHEREKEYWORD;
            }
          case 83: break;
          case 35: 
            { return OP_LIKE;
            }
          case 84: break;
          case 36: 
            { return LEFTKEYWORD;
            }
          case 85: break;
          case 37: 
            { return BOOL;
            }
          case 86: break;
          case 38: 
            { return DESCKEYWORD;
            }
          case 87: break;
          case 39: 
            { return FULLKEYWORD;
            }
          case 88: break;
          case 40: 
            { return JOINKEYWORD;
            }
          case 89: break;
          case 41: 
            { return INNERKEYWORD;
            }
          case 90: break;
          case 42: 
            { return ORDERKEYWORD;
            }
          case 91: break;
          case 43: 
            { return OUTERKEYWORD;
            }
          case 92: break;
          case 44: 
            { return RIGHTKEYWORD;
            }
          case 93: break;
          case 45: 
            { return GROUPKEYWORD;
            }
          case 94: break;
          case 46: 
            { return UNIONKEYWORD;
            }
          case 95: break;
          case 47: 
            { return SELECTKEYWORD;
            }
          case 96: break;
          case 48: 
            { return HAVINGKEYWORD;
            }
          case 97: break;
          case 49: 
            { return DISTINCTKEYWORD;
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
