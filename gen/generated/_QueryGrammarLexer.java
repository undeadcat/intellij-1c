/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package generated;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static generated.GeneratedTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_QueryGrammarLexer.flex</tt>
 */
public class _QueryGrammarLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 7, 6]
   * Total runtime size is 2576 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>13]<<7)|((ch>>6)&0x7f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\206\2");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\12\3\1\6\1\7\110\3\1\10\45\3\1\11\1\12\2\3\1\13\73"+
    "\3\1\10\277\3");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\66\4\101\22\0\1\66\1\3\1\76\5\0\1\104\1\105\1\102\1\107\1\103\1\110"+
    "\1\75\1\100\12\67\1\0\1\106\1\1\1\4\1\2\2\0\1\27\1\111\1\41\1\30\1\10\1\54"+
    "\1\46\1\52\1\72\1\63\1\73\1\5\1\35\1\23\1\25\1\56\1\71\1\32\1\74\1\26\1\34"+
    "\1\45\1\51\1\44\1\112\1\71\1\0\1\77\4\0\1\27\1\111\1\41\1\30\1\10\1\54\1\46"+
    "\1\52\1\72\1\63\1\73\1\5\1\35\1\23\1\25\1\56\1\71\1\32\1\74\1\26\1\34\1\45"+
    "\1\51\1\44\1\112\1\71\12\0\1\101\32\0\1\66\217\0\2\6\115\0\1\16\20\0\1\40"+
    "\1\14\1\24\1\53\1\13\1\17\1\70\1\55\1\31\1\71\1\42\1\33\1\37\1\15\1\12\1\11"+
    "\1\47\1\20\1\21\1\36\2\71\1\65\1\43\1\64\1\61\1\62\1\50\1\22\1\71\1\60\1\57"+
    "\1\40\1\14\1\24\1\53\1\13\1\17\1\70\1\55\1\31\1\71\1\42\1\33\1\37\1\15\1\12"+
    "\1\11\1\47\1\20\1\21\1\36\2\71\1\65\1\43\1\64\1\61\1\62\1\50\1\22\1\71\1\60"+
    "\1\57\60\0\1\66\77\0\13\66\35\0\2\101\5\0\1\66\57\0\1\66\112\0\1\7\25\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\5\5\1\1\4\5\1\6\4\5\1\7\17\5\1\10"+
    "\1\11\2\5\1\12\1\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\5\1\23\1\24\1\25"+
    "\1\0\2\5\1\0\1\26\1\6\2\5\1\27\3\5"+
    "\1\30\2\0\14\5\1\31\1\32\5\5\1\33\2\5"+
    "\1\33\1\0\6\5\1\34\1\0\4\5\1\0\23\5"+
    "\1\6\1\26\2\5\1\0\1\35\1\0\1\36\1\37"+
    "\1\0\2\5\2\0\1\5\1\40\5\5\1\0\1\41"+
    "\12\5\1\42\3\5\1\43\2\5\1\44\1\7\1\41"+
    "\1\44\2\0\4\5\1\32\1\5\1\0\3\5\1\0"+
    "\6\5\1\0\4\5\1\33\4\5\1\45\3\5\1\0"+
    "\3\5\1\35\1\46\1\47\1\46\1\0\2\50\5\5"+
    "\1\0\5\5\1\51\6\5\1\52\1\53\1\0\2\54"+
    "\4\5\1\0\2\5\1\0\4\5\2\55\5\5\1\56"+
    "\1\5\1\0\1\5\1\0\1\57\2\60\2\5\1\61"+
    "\5\5\1\0\6\5\1\62\1\63\1\0\3\5\2\64"+
    "\2\65\3\5\1\66\1\5\1\0\1\5\1\52\1\61"+
    "\3\5\1\67\6\5\1\0\6\5\2\70\1\67\4\5"+
    "\1\0\10\5\2\71\15\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\113\0\u0177\0\u01c2"+
    "\0\u020d\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a"+
    "\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672"+
    "\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca"+
    "\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22"+
    "\0\u0b6d\0\u0bb8\0\u0c03\0\113\0\u0c4e\0\u0c99\0\113\0\113"+
    "\0\113\0\113\0\113\0\113\0\113\0\u0ce4\0\113\0\113"+
    "\0\113\0\u0d2f\0\u0d7a\0\u0dc5\0\u0e10\0\113\0\u0e5b\0\u0ea6"+
    "\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2\0\u101d\0\u02ee\0\u1068\0\u10b3"+
    "\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0\0\u130b"+
    "\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u02ee\0\u1482\0\u14cd\0\u1518"+
    "\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725\0\u1770"+
    "\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u1932\0\u02ee\0\u197d"+
    "\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5"+
    "\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d"+
    "\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a\0\u2085"+
    "\0\u20d0\0\u02ee\0\u211b\0\u2166\0\u0c4e\0\113\0\u21b1\0\u21fc"+
    "\0\u02ee\0\u2247\0\u2292\0\u22dd\0\u2328\0\u2373\0\u23be\0\u02ee"+
    "\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\113\0\u25cb"+
    "\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u27d8\0\u2823"+
    "\0\u286e\0\u02ee\0\u28b9\0\u2904\0\u294f\0\u02ee\0\u299a\0\u29e5"+
    "\0\113\0\u02ee\0\u02ee\0\u02ee\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11"+
    "\0\u2b5c\0\u2ba7\0\u02ee\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e"+
    "\0\u2d69\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76"+
    "\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u02ee\0\u30ed\0\u3138\0\u3183"+
    "\0\u31ce\0\u02ee\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345\0\u3390"+
    "\0\u33db\0\u0c4e\0\113\0\u02ee\0\u02ee\0\u3426\0\113\0\u02ee"+
    "\0\u3471\0\u34bc\0\u3507\0\u3552\0\u359d\0\u35e8\0\u3633\0\u367e"+
    "\0\u36c9\0\u3714\0\u375f\0\u02ee\0\u37aa\0\u37f5\0\u3840\0\u388b"+
    "\0\u38d6\0\u3921\0\u02ee\0\u02ee\0\u396c\0\113\0\u02ee\0\u39b7"+
    "\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f"+
    "\0\u3c5a\0\u3ca5\0\u3cf0\0\113\0\u02ee\0\u3d3b\0\u3d86\0\u3dd1"+
    "\0\u3e1c\0\u3e67\0\u02ee\0\u3eb2\0\u3efd\0\u3f48\0\u3f93\0\u02ee"+
    "\0\113\0\u02ee\0\u3fde\0\u4029\0\113\0\u4074\0\u40bf\0\u410a"+
    "\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u4281\0\u42cc\0\u4317\0\u4362"+
    "\0\u43ad\0\u02ee\0\u02ee\0\u43f8\0\u4443\0\u448e\0\u44d9\0\113"+
    "\0\u02ee\0\113\0\u02ee\0\u4524\0\u456f\0\u45ba\0\u02ee\0\u4605"+
    "\0\u4650\0\u469b\0\113\0\u02ee\0\u46e6\0\u4731\0\u477c\0\113"+
    "\0\u47c7\0\u4812\0\u485d\0\u48a8\0\u48f3\0\u493e\0\u4989\0\u49d4"+
    "\0\u4a1f\0\u4a6a\0\u4ab5\0\u4b00\0\u4b4b\0\113\0\u02ee\0\u02ee"+
    "\0\u4b96\0\u4be1\0\u4c2c\0\u4c77\0\u4cc2\0\u4d0d\0\u4d58\0\u4da3"+
    "\0\u4dee\0\u4e39\0\u4e84\0\u4ecf\0\u4f1a\0\113\0\u02ee\0\u4f65"+
    "\0\u4fb0\0\u4ffb\0\u5046\0\u5091\0\u50dc\0\u5127\0\u5172\0\u51bd"+
    "\0\u5208\0\u5253\0\u529e\0\u52e9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\2\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\14\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\14"+
    "\1\37\1\40\3\14\1\41\1\42\1\14\1\43\1\44"+
    "\1\45\1\46\6\14\1\47\2\14\1\50\1\51\2\14"+
    "\1\52\1\14\1\53\1\54\1\55\1\2\1\56\1\50"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\14\115\0\1\67\1\0\1\70\112\0\1\71\112\0"+
    "\1\67\113\0\1\14\1\72\1\0\1\73\5\14\1\0"+
    "\47\14\1\0\3\14\1\74\2\14\1\75\13\0\2\14"+
    "\16\0\1\76\4\0\1\77\50\0\1\76\23\0\1\100"+
    "\2\0\6\14\1\0\4\14\1\101\42\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\2\14\1\102"+
    "\3\14\1\0\1\103\27\14\1\104\16\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\4\14\1\105"+
    "\1\14\1\0\47\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\47\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\1\106\46\14\1\0\6\14\1\75\13\0\2\14\10\0"+
    "\1\107\23\0\1\110\63\0\1\14\2\0\6\14\1\0"+
    "\1\14\1\111\45\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\2\14\1\112\3\14\1\0\17\14"+
    "\1\113\10\14\1\114\3\14\1\115\12\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\2\14\1\116"+
    "\3\14\1\0\47\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\6\14\1\117\6\14"+
    "\1\120\31\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\2\14\1\121\2\14\1\122\1\0\1\14"+
    "\1\123\27\14\1\124\15\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\4\14\1\125"+
    "\6\14\1\126\1\14\1\127\31\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\6\14"+
    "\1\130\4\14\1\131\17\14\1\132\13\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\133\2\0\6\14\1\134"+
    "\4\14\1\135\21\14\1\136\20\14\1\0\5\14\1\137"+
    "\1\75\13\0\2\14\5\0\1\14\1\140\1\0\1\141"+
    "\5\14\1\0\47\14\1\0\3\14\1\142\2\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\5\14\1\143\1\0"+
    "\1\14\1\144\12\14\1\145\3\14\1\146\15\14\1\147"+
    "\10\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\1\150\1\0\6\14\1\0\47\14\1\0\3\14\1\151"+
    "\2\14\1\75\13\0\2\14\5\0\1\14\2\0\2\14"+
    "\1\152\3\14\1\0\1\153\46\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\4\14"+
    "\1\154\42\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\1\155\1\0\6\14\1\0\10\14\1\156\36\14"+
    "\1\0\3\14\1\157\2\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\1\14\1\160\2\14\1\161\1\14\1\0"+
    "\47\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\12\14\1\162\6\14\1\163\25\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\6\14\1\164\1\14\1\165\36\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\2\14"+
    "\1\166\3\14\1\0\21\14\1\167\25\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\13\14\1\170\33\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\21\14\1\171\25\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\33\14\1\172\13\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\10\14"+
    "\1\173\36\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\3\14\1\174\2\14\1\0\47\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\10\14\1\175\2\14\1\176\1\14\1\177\31\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\6\14\1\200\40\14\1\0\6\14\1\75"+
    "\13\0\2\14\66\0\1\50\12\0\1\50\100\0\1\51"+
    "\30\0\1\14\2\0\6\14\1\76\4\14\1\201\42\14"+
    "\1\0\5\14\1\202\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\1\203\5\14\1\0\15\14\1\204\31\14\1\0"+
    "\6\14\1\75\13\0\2\14\76\205\1\206\1\207\13\205"+
    "\100\0\1\210\17\0\1\14\2\0\6\14\1\0\47\14"+
    "\1\0\6\14\1\75\13\0\1\14\1\211\7\0\1\212"+
    "\63\0\1\212\24\0\1\14\2\0\6\14\1\0\35\14"+
    "\1\213\11\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\1\0\1\212\6\14\1\0\47\14\1\0\4\14"+
    "\1\214\1\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\47\14\2\0\5\14\14\0\2\14\23\0"+
    "\1\215\74\0\1\14\2\0\6\14\1\216\47\14\1\0"+
    "\5\14\1\217\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\11\14\1\220\35\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\3\14\1\221\2\14"+
    "\1\0\14\14\1\222\32\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\30\14\1\223"+
    "\16\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\21\14\1\224\25\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\43\14\1\225\3\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\226\142\0\1\227\62\0\1\14\2\0\6\14"+
    "\1\0\2\14\1\230\44\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\1\231\46\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\20\14\1\232\26\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\1\233"+
    "\46\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\30\14\1\234\16\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\34\14\1\235\12\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\7\14\1\106\37\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\236\2\0"+
    "\6\14\1\0\47\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\36\14\1\237\10\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\1\240\16\14\1\241\27\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\1\242\46\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\4\14\1\243\1\14\1\0\47\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\11\14\1\244\35\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\7\14\1\245"+
    "\37\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\37\14\1\246\7\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\15\14\1\247\31\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\1\250\5\14\1\0\47\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\242\2\0\6\14"+
    "\1\0\47\14\1\0\6\14\1\75\13\0\2\14\41\0"+
    "\1\251\56\0\1\14\2\0\6\14\1\0\11\14\1\252"+
    "\35\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\27\14\1\253\17\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\22\14\1\254\24\14\1\0\6\14\1\75\13\0\2\14"+
    "\16\0\1\255\55\0\1\255\23\0\1\14\2\0\6\14"+
    "\1\256\47\14\1\0\5\14\1\257\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\255\47\14\1\0\5\14"+
    "\1\260\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\21\14\1\261\25\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\2\14\1\262"+
    "\44\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\12\14\1\263\34\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\1\264\46\14\1\0\6\14\1\75\13\0\2\14\46\0"+
    "\1\265\51\0\1\14\2\0\6\14\1\0\27\14\1\266"+
    "\17\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\47\14\1\0\1\14\1\267\4\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\5\14\1\270\41\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\1\271\1\0\6\14\1\0\47\14\1\0"+
    "\3\14\1\272\2\14\1\75\13\0\2\14\23\0\1\227"+
    "\74\0\1\14\2\0\6\14\1\0\25\14\1\253\21\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\4\14\1\253\42\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\2\14\1\273\3\14"+
    "\1\0\47\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\31\14\1\274\15\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\5\14"+
    "\1\275\1\0\47\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\23\14\1\276\23\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\15\14\1\277\31\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\300\47\14"+
    "\1\0\5\14\1\301\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\5\14\1\302\1\0\14\14\1\303\17\14\1\304"+
    "\12\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\23\14\1\305\23\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\6\14\1\306\40\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\36\14\1\307\10\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\1\310\5\14\1\0\47\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\26\14\1\311"+
    "\20\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\1\312\46\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\313\2\0\6\14\1\0\47\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\6\14\1\314\40\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\315\2\0\6\14\1\0\47\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\1\316"+
    "\1\0\6\14\1\0\47\14\1\0\3\14\1\317\2\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\4\14\1\320\42\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\321\2\0\6\14\1\0\47\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\16\14\1\253\30\14\1\0\6\14\1\75\13\0\2\14"+
    "\76\205\1\322\1\207\13\205\101\210\1\0\11\210\10\0"+
    "\1\323\107\0\1\14\2\0\6\14\1\0\7\14\1\324"+
    "\37\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\1\325\5\14\1\0\47\14\1\0\6\14\1\75"+
    "\13\0\2\14\10\0\1\326\112\0\1\327\107\0\1\14"+
    "\2\0\1\330\5\14\1\0\47\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\2\14\1\331\3\14"+
    "\1\0\47\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\5\14\1\332\1\0\47\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\5\14\1\333\41\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\5\14\1\334\41\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\1\335\46\14\1\0\6\14\1\75\13\0"+
    "\2\14\10\0\1\336\107\0\1\14\2\0\6\14\1\0"+
    "\3\14\1\202\43\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\3\14\1\337\2\14\1\0\47\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\20\14\1\340\26\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\3\14\1\341\2\14"+
    "\1\0\47\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\17\14\1\342\27\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\3\14"+
    "\1\343\2\14\1\0\47\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\344\2\0\6\14\1\0\47\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\30\14\1\254\16\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\45\14\1\345"+
    "\1\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\2\14\1\346\44\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\2\14\1\347"+
    "\3\14\1\0\30\14\1\350\16\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\1\351\5\14\1\0"+
    "\47\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\1\352\5\14\1\0\47\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\1\353\5\14\1\0"+
    "\47\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\4\14\1\354\42\14\1\0\6\14"+
    "\1\75\13\0\2\14\26\0\1\355\125\0\1\356\56\0"+
    "\1\14\2\0\6\14\1\0\22\14\1\357\24\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\7\14\1\360\37\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\24\14\1\361"+
    "\22\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\12\14\1\362\34\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\41\14\1\363\5\14\1\0\6\14\1\75\13\0\2\14"+
    "\52\0\1\364\45\0\1\14\2\0\6\14\1\0\33\14"+
    "\1\365\13\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\3\14\1\353\43\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\2\14"+
    "\1\366\3\14\1\0\47\14\1\0\6\14\1\75\13\0"+
    "\2\14\25\0\1\367\72\0\1\14\2\0\6\14\1\0"+
    "\6\14\1\370\40\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\30\14\1\371\16\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\5\14\1\357\41\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\12\14"+
    "\1\372\34\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\1\14\1\275\45\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\4\14\1\373\42\14\1\0\6\14\1\75\13\0"+
    "\2\14\10\0\1\374\107\0\1\14\2\0\1\375\5\14"+
    "\1\0\47\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\1\376\46\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\12\14\1\377\34\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\3\14\1\u0100\2\14\1\0\47\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\15\14\1\u0101\31\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\14\14"+
    "\1\u0102\32\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\4\14\1\u0103\6\14\1\u0104"+
    "\33\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\1\u0105\1\0\6\14\1\0\47\14\1\0\3\14\1\u0106"+
    "\2\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\u0107\47\14\1\0\5\14\1\247\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\16\14\1\147\30\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\u0108\2\0"+
    "\6\14\1\0\47\14\1\0\6\14\1\75\13\0\2\14"+
    "\23\0\1\u0109\74\0\1\14\2\0\6\14\1\0\4\14"+
    "\1\u010a\42\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\1\u010b\5\14\1\0\47\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\1\u010c\5\14"+
    "\1\0\47\14\1\0\6\14\1\75\13\0\2\14\32\0"+
    "\1\u010d\65\0\1\14\2\0\4\14\1\u010e\1\14\1\0"+
    "\47\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\2\14\1\u010f\3\14\1\0\47\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\31\14\1\u0110\15\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\2\14\1\u0111\3\14\1\0\47\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\3\14\1\u0112\2\14\1\0\47\14\1\0\6\14\1\75"+
    "\13\0\2\14\41\0\1\u0113\56\0\1\14\2\0\6\14"+
    "\1\0\12\14\1\u0114\34\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\21\14\1\253"+
    "\25\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\5\14\1\u0115\1\0\47\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\1\14\1\u0116\4\14"+
    "\1\0\47\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\21\14\1\354\25\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\5\14"+
    "\1\u0117\1\0\47\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\30\14\1\u0118\16\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\30\14\1\375\16\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\21\14"+
    "\1\u0119\25\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\13\14\1\u011a\33\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\13\14\1\u011b\33\14\1\0\6\14\1\75\13\0"+
    "\2\14\6\0\1\u011c\63\0\1\u011c\25\0\1\14\1\u011c"+
    "\1\0\6\14\1\0\47\14\1\0\3\14\1\u011d\2\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\1\330\46\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\5\14\1\u011e\1\0\47\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\42\14\1\u011f\4\14\1\0\6\14\1\75\13\0\2\14"+
    "\26\0\1\u0120\71\0\1\14\2\0\6\14\1\0\7\14"+
    "\1\u0121\37\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\1\324\46\14\1\0\6\14"+
    "\1\75\13\0\2\14\23\0\1\u0122\74\0\1\14\2\0"+
    "\6\14\1\0\4\14\1\u0123\42\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\40\14"+
    "\1\u0124\6\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\20\14\1\u0125\26\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\7\14\1\253\37\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\46\14\1\220"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\24\14\1\u0126\22\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\21\14"+
    "\1\u0103\25\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\37\14\1\u0127\7\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\12\14\1\u0128\34\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\1\312\5\14\1\0\47\14"+
    "\1\0\6\14\1\75\13\0\2\14\23\0\1\u0129\74\0"+
    "\1\14\2\0\6\14\1\0\4\14\1\u012a\42\14\1\0"+
    "\6\14\1\75\13\0\2\14\10\0\1\u012b\107\0\1\14"+
    "\2\0\6\14\1\0\13\14\1\u012c\33\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\22\14\1\u012d\24\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\5\14\1\u012e\1\0\47\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\1\u0108\46\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\1\246\46\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\1\u0121\46\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\12\14\1\u012f\34\14"+
    "\1\0\6\14\1\75\13\0\2\14\26\0\1\u0130\71\0"+
    "\1\14\2\0\5\14\1\u0131\1\0\47\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\1\u0132\46\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\1\14\1\u0133\4\14\1\0\47\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\1\u0134\46\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\1\u0135\46\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\2\14\1\u0136\44\14\1\0\6\14\1\75\13\0"+
    "\2\14\23\0\1\u0137\74\0\1\14\2\0\6\14\1\0"+
    "\4\14\1\u0138\42\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\21\14\1\353\25\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\12\14\1\u0139\34\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\3\14\1\u013a\2\14"+
    "\1\0\47\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\17\14\1\u013b\27\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\1\u013c\46\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\24\14\1\u013d\22\14"+
    "\1\0\6\14\1\75\13\0\2\14\46\0\1\u013e\51\0"+
    "\1\14\2\0\6\14\1\0\27\14\1\u013f\17\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\7\14\1\u0140\37\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\2\14\1\325\3\14\1\0"+
    "\47\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\5\14\1\u0141\1\0\47\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\1\u0142"+
    "\46\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\1\253\46\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\12\14"+
    "\1\u0143\34\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\1\u011b\46\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\5\14\1\u0144"+
    "\1\0\47\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\3\14\1\u0140\43\14\1\0"+
    "\6\14\1\75\13\0\2\14\41\0\1\u0145\56\0\1\14"+
    "\2\0\6\14\1\0\22\14\1\u0146\24\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\1\u013f\46\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\2\14\1\u0147\3\14\1\0\47\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\20\14\1\253\26\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\1\14\1\u0148"+
    "\45\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\5\14\1\u0149\1\0\47\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\12\14"+
    "\1\u014a\34\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\5\14\1\u014b\1\0\47\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\30\14\1\u014c\16\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\5\14\1\u014d\1\0\47\14\1\0"+
    "\6\14\1\75\13\0\2\14\26\0\1\u014e\71\0\1\14"+
    "\2\0\6\14\1\0\7\14\1\u014f\37\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\24\14\1\u0150\22\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\2\14\1\u0151\44\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\31\14\1\u0152\15\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\2\14"+
    "\1\u0153\44\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\12\14\1\u0154\34\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\2\14"+
    "\1\u0155\3\14\1\0\47\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\1\u0156\46\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\12\14\1\u0157\34\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\6\14\1\0\5\14"+
    "\1\u0158\41\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\1\u014f\46\14\1\0\6\14"+
    "\1\75\13\0\2\14\5\0\1\14\2\0\6\14\1\0"+
    "\3\14\1\u0123\43\14\1\0\6\14\1\75\13\0\2\14"+
    "\5\0\1\14\2\0\6\14\1\0\1\u010a\46\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\5\14\1\u0159\41\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\1\u012c\46\14"+
    "\1\0\6\14\1\75\13\0\2\14\5\0\1\14\2\0"+
    "\6\14\1\0\2\14\1\u015a\44\14\1\0\6\14\1\75"+
    "\13\0\2\14\5\0\1\14\2\0\2\14\1\253\3\14"+
    "\1\0\47\14\1\0\6\14\1\75\13\0\2\14\5\0"+
    "\1\14\2\0\6\14\1\0\21\14\1\u015b\25\14\1\0"+
    "\6\14\1\75\13\0\2\14\5\0\1\14\2\0\6\14"+
    "\1\0\3\14\1\u011a\43\14\1\0\6\14\1\75\13\0"+
    "\2\14\5\0\1\14\2\0\6\14\1\0\2\14\1\u015c"+
    "\44\14\1\0\6\14\1\75\13\0\2\14\5\0\1\14"+
    "\2\0\6\14\1\0\3\14\1\u0127\43\14\1\0\6\14"+
    "\1\75\13\0\2\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\45\1\1\11\2\1\7\11"+
    "\1\1\3\11\1\0\2\1\1\0\1\11\10\1\2\0"+
    "\27\1\1\0\7\1\1\0\4\1\1\0\27\1\1\0"+
    "\1\11\1\0\2\1\1\0\2\1\2\0\7\1\1\0"+
    "\1\11\21\1\1\11\3\1\2\0\6\1\1\0\3\1"+
    "\1\0\6\1\1\0\15\1\1\0\4\1\1\11\2\1"+
    "\1\0\1\11\6\1\1\0\16\1\1\0\1\11\5\1"+
    "\1\0\2\1\1\0\4\1\1\11\10\1\1\0\1\1"+
    "\1\0\1\1\1\11\3\1\1\11\5\1\1\0\10\1"+
    "\1\0\3\1\1\11\1\1\1\11\6\1\1\0\1\1"+
    "\1\11\4\1\1\11\6\1\1\0\6\1\1\11\6\1"+
    "\1\0\10\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _QueryGrammarLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QueryGrammarLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 58: break;
          case 2: 
            { return OP_LT;
            }
          case 59: break;
          case 3: 
            { return OP_GT;
            }
          case 60: break;
          case 4: 
            { return OP_EQ;
            }
          case 61: break;
          case 5: 
            { return ID_TOKEN;
            }
          case 62: break;
          case 6: 
            { return OP_IN;
            }
          case 63: break;
          case 7: 
            { return OP_AND;
            }
          case 64: break;
          case 8: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 65: break;
          case 9: 
            { return NUMBER;
            }
          case 66: break;
          case 10: 
            { return DOT;
            }
          case 67: break;
          case 11: 
            { return OP_DIV;
            }
          case 68: break;
          case 12: 
            { return ASTERISK;
            }
          case 69: break;
          case 13: 
            { return COMMA;
            }
          case 70: break;
          case 14: 
            { return LPAREN;
            }
          case 71: break;
          case 15: 
            { return RPAREN;
            }
          case 72: break;
          case 16: 
            { return SEMICOLON;
            }
          case 73: break;
          case 17: 
            { return OP_PLUS;
            }
          case 74: break;
          case 18: 
            { return OP_MINUS;
            }
          case 75: break;
          case 19: 
            { return OP_NEQ;
            }
          case 76: break;
          case 20: 
            { return OP_LTE;
            }
          case 77: break;
          case 21: 
            { return OP_GTE;
            }
          case 78: break;
          case 22: 
            { return OP_IS;
            }
          case 79: break;
          case 23: 
            { return ПОKEYWORD;
            }
          case 80: break;
          case 24: 
            { return OP_NOT;
            }
          case 81: break;
          case 25: 
            { return ONKEYWORD;
            }
          case 82: break;
          case 26: 
            { return OP_OR;
            }
          case 83: break;
          case 27: 
            { return ASKEYWORD;
            }
          case 84: break;
          case 28: 
            { return FROMKEYWORD;
            }
          case 85: break;
          case 29: 
            { return STRING;
            }
          case 86: break;
          case 30: 
            { return LINE_COMMENT;
            }
          case 87: break;
          case 31: 
            { return BYKEYWORD;
            }
          case 88: break;
          case 32: 
            { return ENDKEYWORD;
            }
          case 89: break;
          case 33: 
            { return AGGREGATIONFUNCTION;
            }
          case 90: break;
          case 34: 
            { return ALLKEYWORD;
            }
          case 91: break;
          case 35: 
            { return TOPKEYWORD;
            }
          case 92: break;
          case 36: 
            { return ASCKEYWORD;
            }
          case 93: break;
          case 37: 
            { return WHEREKEYWORD;
            }
          case 94: break;
          case 38: 
            { return OP_LIKE;
            }
          case 95: break;
          case 39: 
            { return LEFTKEYWORD;
            }
          case 96: break;
          case 40: 
            { return ELSEKEYWORD;
            }
          case 97: break;
          case 41: 
            { return NULL;
            }
          case 98: break;
          case 42: 
            { return BOOL;
            }
          case 99: break;
          case 43: 
            { return THENKEYWORD;
            }
          case 100: break;
          case 44: 
            { return DESCKEYWORD;
            }
          case 101: break;
          case 45: 
            { return CASEKEYWORD;
            }
          case 102: break;
          case 46: 
            { return WHENKEYWORD;
            }
          case 103: break;
          case 47: 
            { return FULLKEYWORD;
            }
          case 104: break;
          case 48: 
            { return JOINKEYWORD;
            }
          case 105: break;
          case 49: 
            { return INNERKEYWORD;
            }
          case 106: break;
          case 50: 
            { return ORDERKEYWORD;
            }
          case 107: break;
          case 51: 
            { return OUTERKEYWORD;
            }
          case 108: break;
          case 52: 
            { return RIGHTKEYWORD;
            }
          case 109: break;
          case 53: 
            { return UNIONKEYWORD;
            }
          case 110: break;
          case 54: 
            { return GROUPKEYWORD;
            }
          case 111: break;
          case 55: 
            { return SELECTKEYWORD;
            }
          case 112: break;
          case 56: 
            { return HAVINGKEYWORD;
            }
          case 113: break;
          case 57: 
            { return DISTINCTKEYWORD;
            }
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
