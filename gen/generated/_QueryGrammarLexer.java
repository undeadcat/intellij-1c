/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package generated;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static generated.GeneratedTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_QueryGrammarLexer.flex</tt>
 */
public class _QueryGrammarLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 2184 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\6\2\1\3\44\2\1\4\22\2\1\5\37\2\1\4\237\2");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\4\12\22\0\1\5\1\3\1\13\2\0\1\23\1\0\1\10\1\20\1\21\1\15\1\24\1\17"+
    "\1\25\1\16\1\14\12\6\1\0\1\22\1\1\1\4\1\2\2\0\32\7\1\0\1\11\4\0\1\35\1\56"+
    "\1\41\1\36\1\31\1\42\1\54\1\50\1\27\1\103\1\30\1\26\1\43\1\32\1\33\1\46\1"+
    "\7\1\37\1\40\1\34\1\55\1\71\1\47\1\7\1\57\1\7\12\0\1\12\32\0\1\5\357\0\40"+
    "\7\1\66\1\77\1\65\1\51\1\52\1\53\1\106\1\45\1\44\2\7\1\105\1\72\1\102\1\64"+
    "\1\63\1\61\1\60\1\67\1\62\3\7\1\76\1\104\1\74\1\101\1\100\1\70\1\7\1\73\1"+
    "\75\60\0\1\5\177\0\13\5\35\0\2\12\5\0\1\5\57\0\1\5\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\30\7\1\22\1\23\1\24"+
    "\1\0\1\25\3\0\1\26\4\7\1\27\1\30\5\7"+
    "\1\31\7\7\1\32\7\7\1\33\5\7\1\34\7\7"+
    "\1\25\3\7\1\35\2\7\1\36\1\7\1\37\1\40"+
    "\1\41\13\7\1\42\11\7\1\43\6\7\1\44\1\45"+
    "\3\7\1\46\1\7\1\47\3\7\1\50\1\51\11\7"+
    "\1\52\3\7\1\53\2\7\1\54\1\7\1\55\1\56"+
    "\1\57\1\60\1\7\1\61\1\7\1\62\2\7\1\63"+
    "\1\7\1\64\1\65\10\7\1\66\1\7\1\67\1\70"+
    "\1\7\1\71\3\7\1\72\1\73\4\7\1\74\4\7"+
    "\1\75\1\7\1\76\13\7\1\77\1\7\1\100\1\101"+
    "\1\7\1\102\1\7\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\107\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\107\0\107\0\107\0\u030d\0\u0354\0\u039b"+
    "\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3"+
    "\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b"+
    "\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\107\0\107\0\107"+
    "\0\u0238\0\107\0\u09b5\0\u027f\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1"+
    "\0\u0b18\0\u0b5f\0\u01f1\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2"+
    "\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa"+
    "\0\u0f41\0\u01f1\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb"+
    "\0\u1132\0\u01f1\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc"+
    "\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u027f"+
    "\0\u1514\0\u155b\0\u15a2\0\u01f1\0\u15e9\0\u1630\0\u01f1\0\u1677"+
    "\0\u01f1\0\u01f1\0\u01f1\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da"+
    "\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u01f1\0\u19cb"+
    "\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03"+
    "\0\u01f1\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u01f1"+
    "\0\u01f1\0\u1df4\0\u1e3b\0\u1e82\0\u01f1\0\u1ec9\0\u01f1\0\u1f10"+
    "\0\u1f57\0\u1f9e\0\u01f1\0\u01f1\0\u1fe5\0\u202c\0\u2073\0\u20ba"+
    "\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u01f1\0\u2264\0\u22ab"+
    "\0\u22f2\0\u01f1\0\u2339\0\u2380\0\u01f1\0\u23c7\0\u01f1\0\u01f1"+
    "\0\u01f1\0\u01f1\0\u240e\0\u01f1\0\u2455\0\u01f1\0\u249c\0\u24e3"+
    "\0\u01f1\0\u252a\0\u01f1\0\u01f1\0\u2571\0\u25b8\0\u25ff\0\u2646"+
    "\0\u268d\0\u26d4\0\u271b\0\u2762\0\u01f1\0\u27a9\0\u01f1\0\u01f1"+
    "\0\u27f0\0\u01f1\0\u2837\0\u287e\0\u28c5\0\u01f1\0\u01f1\0\u290c"+
    "\0\u2953\0\u299a\0\u29e1\0\u01f1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd"+
    "\0\u01f1\0\u2b44\0\u01f1\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7"+
    "\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u01f1\0\u2e98"+
    "\0\u01f1\0\u01f1\0\u2edf\0\u01f1\0\u2f26\0\u01f1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\7\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\11\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\11\1\37\1\11\1\40\2\11\1\41\1\42\1\43"+
    "\2\11\1\44\1\45\1\46\1\11\1\47\1\11\1\50"+
    "\1\51\1\52\1\53\15\11\1\54\1\11\1\55\1\11"+
    "\111\0\1\56\1\0\1\57\106\0\1\60\106\0\1\56"+
    "\107\0\1\7\4\0\1\7\102\0\1\10\106\0\2\11"+
    "\16\0\61\11\10\61\1\62\1\63\75\61\11\64\1\65"+
    "\1\64\1\62\73\64\14\0\1\66\100\0\2\11\16\0"+
    "\1\11\1\67\1\11\1\70\55\11\6\0\2\11\16\0"+
    "\4\11\1\71\54\11\6\0\2\11\16\0\5\11\1\72"+
    "\53\11\6\0\2\11\16\0\4\11\1\73\4\11\1\74"+
    "\15\11\1\75\31\11\6\0\2\11\16\0\5\11\1\76"+
    "\3\11\1\77\47\11\6\0\2\11\16\0\1\100\3\11"+
    "\1\101\5\11\1\102\46\11\6\0\2\11\16\0\1\11"+
    "\1\103\1\11\1\104\55\11\6\0\2\11\16\0\1\11"+
    "\1\105\57\11\6\0\2\11\16\0\3\11\1\106\55\11"+
    "\6\0\2\11\16\0\7\11\1\107\1\11\1\110\15\11"+
    "\1\111\31\11\6\0\2\11\16\0\17\11\1\112\12\11"+
    "\1\113\11\11\1\114\14\11\6\0\2\11\16\0\22\11"+
    "\1\115\36\11\6\0\2\11\16\0\7\11\1\116\51\11"+
    "\6\0\2\11\16\0\24\11\1\117\34\11\6\0\2\11"+
    "\16\0\11\11\1\120\47\11\6\0\2\11\16\0\4\11"+
    "\1\121\54\11\6\0\2\11\16\0\31\11\1\122\27\11"+
    "\6\0\2\11\16\0\23\11\1\123\12\11\1\124\22\11"+
    "\6\0\2\11\16\0\35\11\1\125\13\11\1\126\7\11"+
    "\6\0\2\11\16\0\33\11\1\127\2\11\1\130\22\11"+
    "\6\0\2\11\16\0\51\11\1\131\7\11\6\0\2\11"+
    "\16\0\32\11\1\132\3\11\1\133\15\11\1\134\4\11"+
    "\6\0\2\11\16\0\5\11\1\135\53\11\6\0\2\11"+
    "\16\0\25\11\1\136\10\11\1\137\22\11\12\61\1\0"+
    "\74\61\11\64\1\65\1\64\1\140\73\64\12\66\1\0"+
    "\74\66\6\0\2\11\16\0\2\11\1\141\56\11\6\0"+
    "\2\11\16\0\14\11\1\142\44\11\6\0\2\11\16\0"+
    "\4\11\1\143\54\11\6\0\2\11\16\0\6\11\1\144"+
    "\52\11\6\0\2\11\16\0\10\11\1\145\50\11\6\0"+
    "\2\11\16\0\6\11\1\146\52\11\6\0\2\11\16\0"+
    "\20\11\1\147\40\11\6\0\2\11\16\0\27\11\1\150"+
    "\31\11\6\0\2\11\16\0\1\151\60\11\6\0\2\11"+
    "\16\0\10\11\1\152\50\11\6\0\2\11\16\0\13\11"+
    "\1\153\45\11\6\0\2\11\16\0\12\11\1\154\46\11"+
    "\6\0\2\11\16\0\12\11\1\155\46\11\6\0\2\11"+
    "\16\0\26\11\1\156\32\11\6\0\2\11\16\0\1\157"+
    "\60\11\6\0\2\11\16\0\1\160\60\11\6\0\2\11"+
    "\16\0\5\11\1\161\53\11\6\0\2\11\16\0\1\162"+
    "\60\11\6\0\2\11\16\0\41\11\1\163\17\11\6\0"+
    "\2\11\16\0\25\11\1\164\33\11\6\0\2\11\16\0"+
    "\3\11\1\165\55\11\6\0\2\11\16\0\43\11\1\166"+
    "\15\11\6\0\2\11\16\0\25\11\1\167\33\11\6\0"+
    "\2\11\16\0\5\11\1\170\53\11\6\0\2\11\16\0"+
    "\1\11\1\171\57\11\6\0\2\11\16\0\33\11\1\172"+
    "\25\11\6\0\2\11\16\0\25\11\1\173\33\11\6\0"+
    "\2\11\16\0\36\11\1\174\22\11\6\0\2\11\16\0"+
    "\52\11\1\175\6\11\6\0\2\11\16\0\40\11\1\176"+
    "\20\11\6\0\2\11\16\0\57\11\1\177\1\11\6\0"+
    "\2\11\16\0\53\11\1\200\5\11\6\0\2\11\16\0"+
    "\25\11\1\201\33\11\6\0\2\11\16\0\17\11\1\202"+
    "\41\11\6\0\2\11\16\0\25\11\1\203\6\11\1\204"+
    "\24\11\6\0\2\11\16\0\1\11\1\205\57\11\6\0"+
    "\2\11\16\0\37\11\1\206\21\11\6\0\2\11\16\0"+
    "\60\11\1\207\6\0\2\11\16\0\3\11\1\210\55\11"+
    "\6\0\2\11\16\0\6\11\1\211\52\11\6\0\2\11"+
    "\16\0\3\11\1\212\55\11\6\0\2\11\16\0\3\11"+
    "\1\213\55\11\6\0\2\11\16\0\3\11\1\214\55\11"+
    "\6\0\2\11\16\0\3\11\1\215\55\11\6\0\2\11"+
    "\16\0\6\11\1\216\52\11\6\0\2\11\16\0\13\11"+
    "\1\217\45\11\6\0\2\11\16\0\22\11\1\220\36\11"+
    "\6\0\2\11\16\0\3\11\1\221\55\11\6\0\2\11"+
    "\16\0\12\11\1\222\46\11\6\0\2\11\16\0\15\11"+
    "\1\223\43\11\6\0\2\11\16\0\1\224\60\11\6\0"+
    "\2\11\16\0\16\11\1\225\42\11\6\0\2\11\16\0"+
    "\45\11\1\226\13\11\6\0\2\11\16\0\11\11\1\227"+
    "\47\11\6\0\2\11\16\0\1\11\1\230\57\11\6\0"+
    "\2\11\16\0\27\11\1\231\31\11\6\0\2\11\16\0"+
    "\5\11\1\232\53\11\6\0\2\11\16\0\34\11\1\233"+
    "\24\11\6\0\2\11\16\0\24\11\1\234\34\11\6\0"+
    "\2\11\16\0\33\11\1\235\25\11\6\0\2\11\16\0"+
    "\37\11\1\236\21\11\6\0\2\11\16\0\37\11\1\237"+
    "\21\11\6\0\2\11\16\0\54\11\1\240\4\11\6\0"+
    "\2\11\16\0\25\11\1\241\33\11\6\0\2\11\16\0"+
    "\33\11\1\242\25\11\6\0\2\11\16\0\56\11\1\243"+
    "\2\11\6\0\2\11\16\0\41\11\1\244\17\11\6\0"+
    "\2\11\16\0\4\11\1\245\54\11\6\0\2\11\16\0"+
    "\36\11\1\246\22\11\6\0\2\11\16\0\42\11\1\247"+
    "\16\11\6\0\2\11\16\0\11\11\1\250\47\11\6\0"+
    "\2\11\16\0\11\11\1\251\47\11\6\0\2\11\16\0"+
    "\11\11\1\252\47\11\6\0\2\11\16\0\1\11\1\253"+
    "\57\11\6\0\2\11\16\0\6\11\1\254\52\11\6\0"+
    "\2\11\16\0\13\11\1\255\45\11\6\0\2\11\16\0"+
    "\3\11\1\256\55\11\6\0\2\11\16\0\54\11\1\257"+
    "\4\11\6\0\2\11\16\0\46\11\1\260\12\11\6\0"+
    "\2\11\16\0\3\11\1\261\55\11\6\0\2\11\16\0"+
    "\4\11\1\262\54\11\6\0\2\11\16\0\20\11\1\263"+
    "\40\11\6\0\2\11\16\0\4\11\1\264\54\11\6\0"+
    "\2\11\16\0\35\11\1\265\23\11\6\0\2\11\16\0"+
    "\16\11\1\266\42\11\6\0\2\11\16\0\47\11\1\267"+
    "\11\11\6\0\2\11\16\0\36\11\1\270\22\11\6\0"+
    "\2\11\16\0\36\11\1\271\22\11\6\0\2\11\16\0"+
    "\24\11\1\272\34\11\6\0\2\11\16\0\54\11\1\273"+
    "\4\11\6\0\2\11\16\0\33\11\1\274\25\11\6\0"+
    "\2\11\16\0\25\11\1\275\33\11\6\0\2\11\16\0"+
    "\4\11\1\276\54\11\6\0\2\11\16\0\6\11\1\277"+
    "\52\11\6\0\2\11\16\0\40\11\1\300\20\11\6\0"+
    "\2\11\16\0\16\11\1\301\42\11\6\0\2\11\16\0"+
    "\26\11\1\302\32\11\6\0\2\11\16\0\35\11\1\303"+
    "\23\11\6\0\2\11\16\0\54\11\1\304\4\11\6\0"+
    "\2\11\16\0\24\11\1\305\34\11\6\0\2\11\16\0"+
    "\25\11\1\306\33\11\6\0\2\11\16\0\25\11\1\307"+
    "\33\11\6\0\2\11\16\0\16\11\1\310\42\11\6\0"+
    "\2\11\16\0\25\11\1\311\33\11\6\0\2\11\16\0"+
    "\25\11\1\312\33\11\6\0\2\11\16\0\13\11\1\313"+
    "\45\11\6\0\2\11\16\0\25\11\1\314\33\11\6\0"+
    "\2\11\16\0\16\11\1\315\42\11\6\0\2\11\16\0"+
    "\25\11\1\316\33\11\6\0\2\11\16\0\36\11\1\317"+
    "\22\11\6\0\2\11\16\0\54\11\1\320\4\11\6\0"+
    "\2\11\16\0\25\11\1\321\33\11\6\0\2\11\16\0"+
    "\54\11\1\322\4\11\6\0\2\11\16\0\6\11\1\323"+
    "\52\11\6\0\2\11\16\0\33\11\1\324\25\11\6\0"+
    "\2\11\16\0\54\11\1\325\4\11\6\0\2\11\16\0"+
    "\50\11\1\326\10\11\6\0\2\11\16\0\16\11\1\327"+
    "\42\11\6\0\2\11\16\0\54\11\1\330\4\11\6\0"+
    "\2\11\16\0\36\11\1\331\22\11\6\0\2\11\16\0"+
    "\16\11\1\332\42\11\6\0\2\11\16\0\16\11\1\333"+
    "\42\11\6\0\2\11\16\0\41\11\1\334\17\11\6\0"+
    "\2\11\16\0\25\11\1\335\33\11\6\0\2\11\16\0"+
    "\37\11\1\336\21\11\6\0\2\11\16\0\25\11\1\337"+
    "\33\11\6\0\2\11\16\0\41\11\1\340\17\11\6\0"+
    "\2\11\16\0\42\11\1\341\16\11\6\0\2\11\16\0"+
    "\25\11\1\342\33\11\6\0\2\11\16\0\40\11\1\343"+
    "\20\11\6\0\2\11\16\0\42\11\1\344\16\11\6\0"+
    "\2\11\16\0\41\11\1\345\17\11\6\0\2\11\16\0"+
    "\42\11\1\346\16\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12141];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\6\1\11\11\30\1\3\11"+
    "\1\0\1\11\3\0\261\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _QueryGrammarLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _QueryGrammarLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 68: break;
          case 2: 
            { return OP_LT;
            }
          case 69: break;
          case 3: 
            { return OP_GT;
            }
          case 70: break;
          case 4: 
            { return OP_EQ;
            }
          case 71: break;
          case 5: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 72: break;
          case 6: 
            { return NUMBER;
            }
          case 73: break;
          case 7: 
            { return IDSIMPLE;
            }
          case 74: break;
          case 8: 
            { return OP_DIV;
            }
          case 75: break;
          case 9: 
            { return ASTERISK;
            }
          case 76: break;
          case 10: 
            { return DOT;
            }
          case 77: break;
          case 11: 
            { return COMMA;
            }
          case 78: break;
          case 12: 
            { return LPAREN;
            }
          case 79: break;
          case 13: 
            { return RPAREN;
            }
          case 80: break;
          case 14: 
            { return SEMICOLON;
            }
          case 81: break;
          case 15: 
            { return OP_REM;
            }
          case 82: break;
          case 16: 
            { return OP_PLUS;
            }
          case 83: break;
          case 17: 
            { return OP_MINUS;
            }
          case 84: break;
          case 18: 
            { return OP_NEQ;
            }
          case 85: break;
          case 19: 
            { return OP_LTE;
            }
          case 86: break;
          case 20: 
            { return OP_GTE;
            }
          case 87: break;
          case 21: 
            { return STRING;
            }
          case 88: break;
          case 22: 
            { return LINE_COMMENT;
            }
          case 89: break;
          case 23: 
            { return ON;
            }
          case 90: break;
          case 24: 
            { return OP_OR;
            }
          case 91: break;
          case 25: 
            { return AS;
            }
          case 92: break;
          case 26: 
            { return ИЗ;
            }
          case 93: break;
          case 27: 
            { return BY;
            }
          case 94: break;
          case 28: 
            { return ПО;
            }
          case 95: break;
          case 29: 
            { return OP_NOT;
            }
          case 96: break;
          case 30: 
            { return TOP;
            }
          case 97: break;
          case 31: 
            { return ALL;
            }
          case 98: break;
          case 32: 
            { return OP_AND;
            }
          case 99: break;
          case 33: 
            { return ASC;
            }
          case 100: break;
          case 34: 
            { return ГДЕ;
            }
          case 101: break;
          case 35: 
            { return ВСЕ;
            }
          case 102: break;
          case 36: 
            { return OP_LIKE;
            }
          case 103: break;
          case 37: 
            { return LEFT;
            }
          case 104: break;
          case 38: 
            { return TRUE;
            }
          case 105: break;
          case 39: 
            { return DESC;
            }
          case 106: break;
          case 40: 
            { return FROM;
            }
          case 107: break;
          case 41: 
            { return FULL;
            }
          case 108: break;
          case 42: 
            { return УБЫВ;
            }
          case 109: break;
          case 43: 
            { return ВОЗР;
            }
          case 110: break;
          case 44: 
            { return JOIN;
            }
          case 111: break;
          case 45: 
            { return ЛОЖЬ;
            }
          case 112: break;
          case 46: 
            { return INNER;
            }
          case 113: break;
          case 47: 
            { return ORDER;
            }
          case 114: break;
          case 48: 
            { return OUTER;
            }
          case 115: break;
          case 49: 
            { return RIGHT;
            }
          case 116: break;
          case 50: 
            { return FALSE;
            }
          case 117: break;
          case 51: 
            { return WHERE;
            }
          case 118: break;
          case 52: 
            { return GROUP;
            }
          case 119: break;
          case 53: 
            { return UNION;
            }
          case 120: break;
          case 54: 
            { return ЛЕВОЕ;
            }
          case 121: break;
          case 55: 
            { return SELECT;
            }
          case 122: break;
          case 56: 
            { return ИСТИНА;
            }
          case 123: break;
          case 57: 
            { return HAVING;
            }
          case 124: break;
          case 58: 
            { return ПРАВОЕ;
            }
          case 125: break;
          case 59: 
            { return ПОЛНОЕ;
            }
          case 126: break;
          case 60: 
            { return ИМЕЮЩИЕ;
            }
          case 127: break;
          case 61: 
            { return ВНЕШНЕЕ;
            }
          case 128: break;
          case 62: 
            { return DISTINCT;
            }
          case 129: break;
          case 63: 
            { return СОЕДИНЕНИЕ;
            }
          case 130: break;
          case 64: 
            { return ОБЪЕДИНИТЬ;
            }
          case 131: break;
          case 65: 
            { return ВНУТРЕННЕЕ;
            }
          case 132: break;
          case 66: 
            { return УПОРЯДОЧИТЬ;
            }
          case 133: break;
          case 67: 
            { return СГРУППИРОВАТЬ;
            }
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
