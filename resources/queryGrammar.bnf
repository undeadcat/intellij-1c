{
  generate = [names = "long" visitor-value = "void"]
  psiPackage = "generated"
  psiImplPackage = "generated"
  psiClassPrefix = ""
  psiImplClassSuffix = "Impl"
  elementTypeClass="com.simple1c.boilerplate._1cElementType"
  implements="com.simple1c.boilerplate._1cElement"
  extends(".*Literal") = expression
  extends("identifier") = expression
  extends(".*Expr") = expression
  extends(".*Expression") = expression
  extends("tableDeclaration") = columnSource
  extends("subqueryTable") = columnSource

  tokens = [
    ASTERISK = '*'
    DOT = '.'
    COMMA = ','
    LPAREN = '('
    RPAREN = ')'
    SEMICOLON = ';'
    OP_EQ = '='
    OP_DIV = '/'
    OP_PLUS = '+'
    OP_MINUS = '-'
    OP_NEQ = 'regexp:<>|\!\='
    OP_LT = '<'
    OP_LTE = '<='
    OP_GT = '>'
    OP_GTE = '>='
    OP_LIKE = 'regexp:like|подобно'
    OP_IS = 'regexp:is|есть'
    OP_IN = 'regexp:in|в'
    OP_NOT = 'regexp:not|не'
    OP_AND = 'regexp:and|и'
    OP_OR = 'regexp:or|или'
    //pretending these words are reserved (they're not)
    //if anyone calls a column 'различные', we're screwed
    aggregationFunction = 'regexp:sum|сумма|count|количество|min|минимум|max|максимум|avg|среднее'
    selectKeyword = 'regexp:select|выбрать'
    whereKeyword = 'regexp:where|где'
    fromKeyword = 'regexp:from|из'
    topKeyword = 'regexp:top|первые'
    distinctKeyword = 'regexp:distinct|различные'
    asKeyword = 'regexp:as|как'
    groupKeyword = 'regexp:group|сгруппировать'
    orderKeyword = 'regexp:order|упорядочить'
    ascKeyword = 'regexp:asc|возр'
    descKeyword = 'regexp:desc|убыв'
    havingKeyword = 'regexp:having|имеющие'
    unionKeyword = 'regexp:union|объединить'
    allKeyword = 'regexp:all|все'
    joinKeyword = 'regexp:join|соединение'
    outerKeyword = 'regexp:outer|внешнее'
    fullKeyword = 'regexp:full|полное'
    leftKeyword = 'regexp:left|левое'
    rightKeyword = 'regexp:right|правое'
    innerKeyword = 'regexp:inner|внутреннее'
    byKeyword = 'by'
    onKeyword = 'on'
    поKeyword = 'по'
    caseKeyword = 'regexp:case|выбор'
    whenKeyword = 'regexp:when|когда'
    thenKeyword = 'regexp:then|тогда'
    elseKeyword = 'regexp:else|иначе'
    endKeyword = 'regexp:end|конец'
    WHITE_SPACE = 'regexp:[\s]+'
    number = 'regexp:\d+'
    bool = 'regexp:true|false|истина|ложь'
    null = 'null'
    ID_TOKEN = 'regexp:([a-zA-Zа-яА-Я][a-zA-Zа-яА-Я0123456789]*)(\.([a-zA-Zа-яА-Я][a-zA-Zа-яА-Я0123456789]*))*'
    string = "regexp:(\"([^\"\\]|\\\"|\\)*\")"
    line_comment = 'regexp://.*'
  ]
}

grammar ::= (queryItem)*
private queryItem ::= rootQuery querySeparator?{
    pin = 1
}

private querySeparator ::= SEMICOLON

select_statement ::= selectKeyword topOpt distinctOpt selectionList
fromKeyword columnSource
joinItem*
[where_expression] [group_expression] {
    methods = [
        topCount = "topOpt/numberLiteral"
        topOpt = ""
        grouping = "expressionList"
        distinctKeyword = ""
        fromKeyword = ""
        groupKeyword = ""
        havingKeyword = ""
        selectKeyword = ""
        whereKeyword = ""
    ]
    pin = 1
}
private where_expression ::= whereKeyword expression
private group_expression ::= groupKeyword (byKeyword| поKeyword) expressionList [havingKeyword expression]

topOpt ::= [topKeyword numberLiteral] //TODO. trash.make private

private distinctOpt ::= distinctKeyword?
alias ::= asKeyword? identifier { //TODO. trash.make private
    methods = [
        asKeyword=""
    ]
}
//selection
selectionItem ::= expression alias? {
    pin = 1
    methods = [
        identifier = ""
        alias = "alias/identifier"
    ]
}

selectionList ::= (ASTERISK | selectionItem (COMMA selectionItem)* ) {
    pin = 1
}

//source
tableDeclaration ::= identifier alias?{
    methods = [
        alias = "alias/identifier"
        identifier = ""
        tableName = "identifier"
    ]
}
subquery ::= LPAREN targetQuery RPAREN {
    pin = 1

}
subqueryTable::= subquery alias {
    pin = 1
    methods = [
        subquery = "/subquery"
        alias = "alias/identifier"
    ]
}
columnSource::= tableDeclaration | subqueryTable

//order by
orderItem ::= expression [ascKeyword | descKeyword]
private orderByExpressionList ::= orderItem (COMMA orderItem) *

//union
private unionList ::= select_statement (unionClause)* {
    pin = 1
}

unionClause ::= unionKeyword allKeyword? select_statement {
    pin = 1
    methods = [
        topCount = "topOpt/numberLiteral"
        unionKeyword = ""
    ]
}

rootQuery::= targetQuery
targetQuery::= unionList [orderKeyword (byKeyword | поKeyword) orderByExpressionList] {
    methods = [
            orderKeyword = ""
        ]
}

//join
joinItem ::= joinKind? joinKeyword columnSource (onKeyword | поKeyword) expression {
    pin = 2
}
joinKind::= innerKeyword | ((fullKeyword | leftKeyword| rightKeyword) (outerKeyword)?)

stringLiteral ::= string
numberLiteral ::= number
boolLiteral ::= bool
nullLiteral ::= null

expressionList ::=  expression (COMMA expression)*

expression ::=
//Priority increases from top to bottom
  boolean_group
  | unary_not_group
  | comparison_group
  | isNull_group
  | add_group
  | mul_group
  | unary_neg_group
  | primary_group

fake binaryExpression::= expression expression {
    methods = [
        left = "expression[0]"
        right = "expression[1]"
        expressionList = ""
    ]
}
fake unaryExpression ::= expression {
    methods = [
        operand = "expression"
        expressionList = ""
    ]
}

private add_group ::=  addExpr| subtractExpr
addExpr ::= expression '+' expression {elementType = binaryExpression}
subtractExpr ::= expression '-' expression {elementType = binaryExpression}

private mul_group ::= multExpr | divExpr 
multExpr ::= expression ASTERISK expression {elementType = binaryExpression}
divExpr ::= expression OP_DIV expression {elementType = binaryExpression}

//todo. GrammarKit requires duplication for some reason
private unary_not_group ::= unaryNotExpr | unaryNotExpr
unaryNotExpr ::= OP_NOT expression {elementType = unaryExpression}

private unary_neg_group ::= unaryNegExpr | unaryNegExpr
unaryNegExpr ::= OP_MINUS expression {elementType = unaryExpression}

private isNull_group ::= isNullExpr | isNullExpr
isNullExpr ::= expression OP_IS OP_NOT? null {elementType = unaryExpression}

private comparison_group ::= eqExpr
    | neqExpr
    | ltExpr
    | lteExpr
    | gtExpr
    | gteExpr
    | likeExpr
    | notLikeExpr

eqExpr ::= expression OP_EQ expression {elementType = binaryExpression}
neqExpr ::= expression OP_NEQ expression {elementType = binaryExpression}
ltExpr ::= expression OP_LT expression {elementType = binaryExpression}
lteExpr ::= expression OP_LTE expression {elementType = binaryExpression}
gtExpr ::= expression OP_GT expression {elementType = binaryExpression}
gteExpr ::= expression OP_GTE expression {elementType = binaryExpression}
likeExpr ::= expression OP_LIKE expression {elementType = binaryExpression}
notLikeExpr ::= expression OP_NOT OP_LIKE expression {elementType = binaryExpression}

private boolean_group ::= andExpr | orExpr
andExpr ::= expression OP_AND expression {elementType = binaryExpression}
orExpr ::= expression OP_OR expression {elementType = binaryExpression}

private primary_group ::=
    aggregateExpression
    | queryFunctionExpression
    | caseExpression
    | inExpression
    | parExpr
    | identifier
    | numberLiteral
    | boolLiteral
    | nullLiteral
    | stringLiteral

identifier ::= ID_TOKEN
parExpr::= '(' expression ')' {
    pin = 1
    elementType = expression
}

//aggregate
aggregateExpression ::= aggregationFunction LPAREN (ASTERISK | distinctOpt expression) RPAREN {
    pin = 2
}

queryFunctionExpression ::= identifier LPAREN expressionList RPAREN {
    pin = 2
    methods = [
        FunctionName = "identifier"
        arguments = "expressionList"
    ]
}

inExpression ::= expression OP_IN (LPAREN expressionList RPAREN | subquery) {
    pin = 2
    methods = [
        OP_IN = ""
    ]
}

caseExpression ::= caseKeyword caseElementList [elseKeyword expression] endKeyword {
    pin = 1
    methods = [
        default = "expression"
        caseKeyword = ""
        elseKeyword = ""
        endKeyword = ""
    ]
}
private caseElementList ::= caseElement+
caseElement ::= whenKeyword expression thenKeyword expression {
    pin = 1
    methods = [
        condition = "expression[0]"
        result = "expression[1]"
        expressionList = ""
        thenKeyword = ""
        whenKeyword = ""
    ]
}

